import type { Point2, Rect2D, Circle2D, BoundRect2D } from '@/shared/types'

/**
 * GfxBiome — доменная сущность биома сцены.
 *
 * Биом описывает:
 * - Область на плоскости XZ (вид сверху), где генерируются инстансы
 * - Правила источников (отбор объектов из библиотеки по тегам/типам)
 * - Параметры алгоритма и плотности через spacing (random/poisson, seed)
 * - Поведение у краёв области (fade/bias)
 * - Случайные трансформации для инстансов (вращение/масштаб/смещения)
 */
export interface GfxBiome {
  /** Уникальный идентификатор биома */
  uuid: string
  /** Человекочитаемое имя биома */
  name: string
  /** Геометрия области действия биома */
  area: GfxBiomeArea
  /** Виден ли слой биома (для отладки/включения-выключения скаттеринга) */
  visible?: boolean
  /** Дефолтная конфигурация скаттеринга биома (алгоритм, spacing, edge/transform/source) */
  scattering: GfxBiomeScatteringConfig
  /**
   * Стратификация биома: набор слоёв (strata), внутри каждого — правила размещения.
   *
   * На первой итерации (скелет) правила не переопределяют глобальные параметры
   * биома и служат для структурирования. В следующих итерациях правила
   * получат локальные параметры (density/edge/transform/sourceSelection).
   */
  strata?: GfxBiomeStratum[]
}

/**
 * Область биома: набор поддерживаемых форм на плоскости XZ.
 *
 * Для простоты используем осевые формы с опциональным поворотом у прямоугольника
 * и произвольные многоугольники (список точек).
 */
export type GfxBiomeArea =
  | GfxBiomeRectArea
  | GfxBiomeCircleArea
  | GfxBiomePolygonArea

/**
 * Страта биома: логический слой размещения (например, деревья/кусты/трава).
 * Содержит частичный оверрайд конфигурации скаттеринга относительно биомных дефолтов.
 */
export interface GfxBiomeStratum {
  /** Имя страты (для UI/логов) */
  name: string
  /** Частичный оверрайд настроек скаттеринга для страты */
  scattering?: Partial<GfxBiomeScatteringConfig>
}

// Удалены правила внутри страты: в v2 страта представлена единичным частичным оверрайдом конфигурации

/**
 * Прямоугольная область биома.
 *
 * Использует осевой прямоугольник на XZ и опциональный поворот вокруг оси Y
 * (в градусах). Поворот применяется вокруг центра прямоугольника.
 */
export interface GfxBiomeRectArea {
  type: 'rect'
  /** Оси‑выровненный прямоугольник на XZ */
  rect: Rect2D
  /** Поворот области вокруг Y (градусы), по умолчанию 0 */
  rotationY?: number
}

/**
 * Круговая область биома.
 */
export interface GfxBiomeCircleArea {
  type: 'circle'
  circle: Circle2D
}

/**
 * Произвольная многоугольная область биома.
 *
 * Точки задаются в плоскости XZ. Для ускорения проверок может храниться
 * предвычислённый ограничивающий прямоугольник.
 */
export interface GfxBiomePolygonArea {
  type: 'polygon'
  /** Список вершин многоугольника [x, z] в порядке обхода */
  points: Point2[]
  /** Предвычисленный ограничивающий прямоугольник (опционально) */
  bounds?: BoundRect2D
}

/**
 * Настройки скаттеринга биома: отбор источников, плотность/распределение, края и рандомизация.
 */
export type GfxScatterAlgorithm = 'random' | 'poisson'

/**
 * Конфигурация скаттеринга v2: алгоритм, spacing, опциональные edge/transform/source и seed.
 *
 * - spacing — единственный канонический параметр плотности (единицы сцены)
 * - algorithm — 'random' | 'poisson'
 * - edge/transform/source — опциональны; при отсутствии применяются дефолты/полная библиотека
 */
export interface GfxBiomeScatteringConfig {
  /** Алгоритм генерации точек */
  algorithm: GfxScatterAlgorithm
  /** Seed для детерминизма (базовый для биома) */
  seed?: number
  /** Минимально желаемая дистанция между точками (единицы сцены) */
  spacing: number
  /** Настройки поведения у границ области (опционально) */
  edge?: GfxBiomeEdgeFalloff
  /** Рандомизация трансформаций (опционально) */
  transform?: GfxBiomePlacementTransform
  /** Фильтр источников (опционально); если не указан — вся библиотека */
  source?: GfxBiomeSourceFilter
}

/**
 * Фильтры источников объектов для скаттеринга биома.
 *
 * Биом выбирает объекты из библиотеки по:
 * - тегам (вхождение хотя бы одного/всех, исключение)
 * - типам примитивов (например, 'box'|'sphere' и т.д. в составе объекта)
 * - явному списку UUID записей библиотеки
 * А также позволяет назначать веса через UUID или тег.
 */
export interface GfxBiomeSourceFilter {
  /** Обязательные теги: объект должен содержать все эти теги */
  requiredTags?: string[]
  /** Достаточные теги: объект должен содержать хотя бы один из этих тегов */
  anyTags?: string[]
  /** Теги‑исключения: объект с такими тегами исключается из выборки */
  excludeTags?: string[]
  /** Явное включение записей библиотеки по их UUID (приоритетнее фильтров) */
  includeLibraryUuids?: string[]
  /** Веса для UUID записей библиотеки (усиливают шанс выбора конкретной записи) */
  weightsByLibraryUuid?: Record<string, number>
  /** Веса для тегов (повышают шанс объектов с указанными тегами) */
  weightsByTag?: Record<string, number>
}

/**
 * Поведение на краях области биома: fade и bias.
 *
 * - fadeWidth — ширина зоны затухания от границы внутрь области (в единицах сцены)
 * - fadeCurve — профиль затухания (линейный или плавный)
 * - edgeBias — смещение вероятности: -1 тянет к краям, +1 к центру, 0 без смещения
 */
export interface GfxBiomeEdgeFalloff {
  /** Ширина зоны затухания от границы внутрь области */
  fadeWidth: number
  /** Профиль затухания по краю */
  fadeCurve?: 'linear' | 'smoothstep'
  /** Смещение вероятности к центру (1) или краю (-1) */
  edgeBias?: number // -1..1
}

/**
 * Рандомизация трансформаций инстансов при размещении.
 */
export interface GfxBiomePlacementTransform {
  /** Случайное вращение вокруг Y: [min, max] в градусах. По умолчанию [0, 360] */
  randomYawDeg?: [number, number]
  /** Случайный масштаб: [min, max]. По умолчанию [1, 1] (без изменений) */
  randomUniformScale?: [number, number]
  /** Локальные случайные смещения по XZ в пределах указанного диапазона */
  randomOffsetXZ?: [number, number]
}
