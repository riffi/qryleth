import type { GfxTerrainConfig } from '../../terrain';
import type { GfxCloudsConfig } from '../../cloud';

/**
 * Перечисление типов слоёв графической сцены.
 * Используется вместо строковых литералов для повышения типобезопасности
 * и единообразия использования по всему коду проекта.
 */
export enum GfxLayerType {
  /** Слой для обычных объектов сцены */
  Object = 'object',
  /** Слой ландшафта (террейна) */
  Landscape = 'landscape',
  /** Слой воды */
  Water = 'water',
  /**
   * УСТАРЕВШЕЕ: исторический тип слоя облаков.
   * Сохранён временно для компиляции до завершения миграции рендера.
   * В новой архитектуре наборы облаков находятся в environmentContent.
   */
  Clouds = 'clouds',
}

/**
 * Перечисление форм ландшафтных слоёв.
 * Используется вместо строковых литералов ('plane' | 'perlin')
 * для повышения типобезопасности и единообразия по всему проекту.
 * Значения перечисления строковые, что сохраняет совместимость с сериализацией и UI-компонентами.
 */
export enum GfxLayerShape {
  /** Плоская поверхность (плоскость) */
  Plane = 'plane',
  /**
   * Рельефная поверхность (террейн).
   * Строковое значение 'terrain' для явного обозначения неплоской поверхности.
   */
  Terrain = 'terrain',
}


/**
 * Упрощённый стоп палитры для совместимости с MultiColorProcessor.
 * Используется для простой окраски по высоте без зональности.
 */
export interface GfxMultiColorPaletteStop {
  /** Значение высоты для этого стопа */
  height: number;
  /** Цвет в любом CSS-формате */
  color: string;
  /** Прозрачность цвета от 0 (полностью прозрачный) до 1 (полностью непрозрачный) */
  alpha?: number;
}

/**
 * Конфигурация многоцветного градиента по высоте.
 * Использует только palette для окраски по высоте.
 */
export interface GfxMultiColorConfig {
  /** Режим окраски: по вершинам или по треугольникам */
  mode?: 'vertex' | 'triangle';
  /**
   * Палитра цветов по высоте. Используется для градиентной окраски по высоте.
   */
  palette?: GfxMultiColorPaletteStop[];
  /**
   * Вклад крутизны склонов в яркость цвета (0..1).
   * Значение 0 - крутизна не влияет, 1 - максимальное влияние.
   * Соответствует параметру slopeBoost из MultiColorProcessor.
   */
  slopeBoost?: number;
}

export interface GfxLayer {
  /**
   * Уникальный идентификатор слоя.
   * Используется для привязки раздельных контейнеров содержимого (ландшафт, вода и т. д.).
   */
  id: string;
  /** Человекочитаемое имя слоя для отображения в UI. */
  name: string;
  /**
   * Тип слоя, заданный перечислением GfxLayerType.
   * Слой является «тонким» и не содержит параметров содержимого —
   * они хранятся отдельно в соответствующих контейнерах sceneStore.
   */
  type: GfxLayerType;
}

/**
 * Устаревшее расширение слоя (legacy):
 * содержит поля, характерные для старой архитектуры, когда параметры
 * содержимого (ландшафты, вода, облака) находились внутри слоя.
 *
 * ВНИМАНИЕ: Используется только для обратной совместимости компонентов,
 * ещё не переведённых на новую схему. Новому коду следует опираться на
 * тонкий тип слоя GfxLayer и контейнеры содержимого сцены.
 */
export interface GfxLayerLegacy extends GfxLayer {
  /** Ширина площадки слоя (мировые единицы). */
  width?: number;
  /** Глубина площадки слоя (ось Z, мировые единицы). */
  depth?: number;
  /** Форма поверхности в старой схеме. */
  shape?: GfxLayerShape;
  /** Конфигурация террейна (legacy хранение в слое). */
  terrain?: GfxTerrainConfig;
  /** Простой цвет слоя (legacy). */
  color?: string;
  /** Многоцветная окраска по высоте (legacy). */
  multiColor?: GfxMultiColorConfig;
  /** Параметры визуализации воды (legacy). */
  water?: GfxWaterConfig;
  /** Конфигурация облаков (legacy). */
  clouds?: GfxCloudsConfig;
}

/**
 * Базовый «тонкий» слой графической сцены новой архитектуры.
 *
 * Данный тип содержит только служебные поля идентификации и категоризации слоя
 * и не включает никакой параметризации содержимого. Все данные содержимого
 * (ландшафты, водоёмы, наборы облаков и пр.) хранятся в раздельных контейнерах,
 * связанных со слоем через его идентификатор (`layerId`).
 *
 * ВНИМАНИЕ: На переходный период в кодовой базе могут сосуществовать как новый
 * базовый тип (GfxLayerBase), так и устаревший расширенный GfxLayer. Постепенно
 * системы будут переключаться на работу через раздельные контейнеры содержимого.
 */
export interface GfxLayerBase {
  /** Уникальный идентификатор слоя */
  id: string
  /** Человекочитаемое имя слоя */
  name: string
  /** Тип слоя: object | landscape | water | environment */
  type: GfxLayerType
}

/**
 * Параметры визуализации водной поверхности.
 */
export interface GfxWaterConfig {
  /**
   * Множитель яркости финального цвета воды (после освещения).
   * По умолчанию 1.6, допустимые значения ~ 0.5..3.0
   */
  brightness?: number;
  /**
   * Тип визуализации воды.
   * simple — старый шейдер на базе собственного ShaderMaterial;
   * realistic — Water из three-stdlib с отражениями/преломлениями.
   * Если не задан, по умолчанию используется 'realistic'.
   */
  type?: 'simple' | 'realistic';
}
