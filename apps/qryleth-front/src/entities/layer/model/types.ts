import type { GfxTerrainConfig } from '../../terrain';

/**
 * Перечисление типов слоёв графической сцены.
 * Используется вместо строковых литералов для повышения типобезопасности
 * и единообразия использования по всему коду проекта.
 */
export enum GfxLayerType {
  /** Слой для обычных объектов сцены */
  Object = 'object',
  /** Слой ландшафта (террейна) */
  Landscape = 'landscape',
  /** Слой воды */
  Water = 'water',
}

/**
 * Перечисление форм ландшафтных слоёв.
 * Используется вместо строковых литералов ('plane' | 'perlin')
 * для повышения типобезопасности и единообразия по всему проекту.
 * Значения перечисления строковые, что сохраняет совместимость с сериализацией и UI-компонентами.
 */
export enum GfxLayerShape {
  /** Плоская поверхность (плоскость) */
  Plane = 'plane',
  /**
   * Рельефная поверхность (террейн).
   * Строковое значение 'terrain' для явного обозначения неплоской поверхности.
   */
  Terrain = 'terrain',
}


/**
 * Упрощённый стоп палитры для совместимости с MultiColorProcessor.
 * Используется для простой окраски по высоте без зональности.
 */
export interface GfxMultiColorPaletteStop {
  /** Значение высоты для этого стопа */
  height: number;
  /** Цвет в любом CSS-формате */
  color: string;
}

/**
 * Конфигурация многоцветного градиента по высоте.
 * Использует только palette для окраски по высоте.
 */
export interface GfxMultiColorConfig {
  /** Режим окраски: по вершинам или по треугольникам */
  mode?: 'vertex' | 'triangle';
  /**
   * Палитра цветов по высоте. Используется для градиентной окраски по высоте.
   */
  palette?: GfxMultiColorPaletteStop[];
  /**
   * Вклад крутизны склонов в яркость цвета (0..1).
   * Значение 0 - крутизна не влияет, 1 - максимальное влияние.
   * Соответствует параметру slopeBoost из MultiColorProcessor.
   */
  slopeBoost?: number;
}

export interface GfxLayer {
  id: string;
  name: string;
  /** Тип слоя, заданный перечислением GfxLayerType */
  type?: GfxLayerType;
  width?: number;
  /**
   * Глубина слоя (ось Z) в условных метрах.
   *
   * Ранее поле называлось «height», что вводило в заблуждение, так как речь идёт
   * не о вертикальной высоте, а о протяжённости площадки по Z. Теперь используется
   * термин «depth». Для обратной совместимости остальные части кода аккуратно
   * обрабатывают наличие старого поля при загрузке старых сцен.
   */
  depth?: number;
  /** Форма поверхности слоя, заданная перечислением GfxLayerShape */
  shape?: GfxLayerShape;
  /** Конфигурация террейна (новая архитектура) */
  terrain?: GfxTerrainConfig;
  /** 
   * Простой цвет слоя (legacy).
   * Используется для обратной совместимости и простых одноцветных слоев.
   */
  color?: string;
  /**
   * Конфигурация многоцветной градиентной окраски.
   * Если задана, то имеет приоритет над полем color.
   */
  multiColor?: GfxMultiColorConfig;
}
