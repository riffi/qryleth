import type { GfxTerrainConfig } from '../../terrain';

/**
 * Перечисление типов слоёв графической сцены.
 * Используется вместо строковых литералов для повышения типобезопасности
 * и единообразия использования по всему коду проекта.
 */
export enum GfxLayerType {
  /** Слой для обычных объектов сцены */
  Object = 'object',
  /** Слой ландшафта (террейна) */
  Landscape = 'landscape',
  /** Слой воды */
  Water = 'water',
}

/**
 * Перечисление форм ландшафтных слоёв.
 * Используется вместо строковых литералов ('plane' | 'perlin')
 * для повышения типобезопасности и единообразия по всему проекту.
 * Значения перечисления строковые, что сохраняет совместимость с сериализацией и UI-компонентами.
 */
export enum GfxLayerShape {
  /** Плоская поверхность (плоскость) */
  Plane = 'plane',
  /**
   * Рельефная поверхность (террейн).
   * Строковое значение 'terrain' для явного обозначения неплоской поверхности.
   */
  Terrain = 'terrain',
}

export interface GfxLayer {
  id: string;
  name: string;
  /** Тип слоя, заданный перечислением GfxLayerType */
  type?: GfxLayerType;
  width?: number;
  height?: number;
  /** Форма поверхности слоя, заданная перечислением GfxLayerShape */
  shape?: GfxLayerShape;
  /** 
   * @deprecated Использовать terrain вместо noiseData
   * Данное поле оставлено для обратной совместимости со старыми сценами
   */
  noiseData?: number[];
  /** Конфигурация террейна (новая архитектура) */
  terrain?: GfxTerrainConfig;
  color?: string;
}
