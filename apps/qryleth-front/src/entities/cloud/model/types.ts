/**
 * Доменные типы для облачного слоя сцены.
 *
 * Облака описываются в виде списка элементов (`GfxCloudItem`). Внешний вид
 * (сегменты, границы объёма, прозрачность, цвет, скорость роста/анимации и т.п.)
 * как правило вычисляется процедурным генератором детерминированно по seed и
 * метапараметрам внешнего вида (appearance). Для продвинутых случаев допускается
 * точечное переопределение рассчитанных полей через `advancedOverrides`.
 */

/**
 * Единичное облако в слое.
 */
export interface GfxCloudItem {
  /** Уникальный идентификатор облака в рамках слоя */
  id: string
  /** Сид, влияющий на внутреннюю рандомизацию параметров конкретного облака (опционален) */
  seed?: number
  /** Позиция облака в мировых координатах [x, y, z] */
  position: [number, number, number]
  /** Поворот вокруг Y (радианы). Может быть задан или рассчитан генератором */
  rotationY?: number

  /**
   * Необязательные точечные переопределения визуальных полей результата.
   * Если задано, эти значения имеют приоритет над вычисленными на основе метапараметров appearance.
   * Все поля являются опциональными и применяются избирательно.
   */
  advancedOverrides?: {
    segments?: number
    /** Габариты «границы» облака [x, y, z] для компонента визуализации */
    bounds?: [number, number, number]
    /** «Объёмность» облака: масштаб распределения частиц */
    volume?: number
    /** Прозрачность облака (0..1) */
    opacity?: number
    /** Цвет облака (CSS-строка) */
    color?: string
    /** Темп «роста» облака */
    growth?: number
    /** Скорость внутренней анимации шума/пульсации */
    animationSpeed?: number
    /** Индивидуальный коэффициент дрейфа (множитель к глобальному ветру) */
    driftFactor?: number
  }
}

/**
 * Конфигурация облачного слоя: просто список облаков.
 * Модель специально минималистична — визуальные поля конкретных облаков могут
 * задаваться через advancedOverrides или вычисляться процедурно на стадии генерации.
 */
export interface GfxCloudsConfig {
  items: GfxCloudItem[]
}

/**
 * Область размещения облаков: прямоугольник или окружность в мировых координатах XZ.
 */
export type GfxCloudPlacementArea =
  | ({ kind: 'rect' } & import('@/shared/types').Rect2D)
  | ({ kind: 'circle' } & import('@/shared/types').Circle2D)

/**
 * Метапараметры внешнего вида облаков. На их основе генератор детерминированно
 * рассчитывает конкретные визуальные параметры для компонентов рендера.
 */
export interface GfxCloudAppearanceMeta {
  /** Набор высокоуровневых пресетов формы/вида облаков */
  stylePreset?: 'cumulus' | 'stratus' | 'cirrus' | 'storm'
  /** Условная шкала размера (1..5) */
  sizeLevel?: 1 | 2 | 3 | 4 | 5
  /** Мягкость/пушистость (0..1) */
  softnessLevel?: number
  /** Динамичность (скорость анимаций/«дыхания») (0..1) */
  dynamicsLevel?: number
  /** Цветовой тон */
  colorTone?: 'white' | 'warm' | 'cold' | 'sunset'
  /** Степень разброса параметров внутри набора (0..1) */
  variance?: number
}

/**
 * Спецификация процедурной генерации облаков.
 * Числовые параметры допускают запись как константа или диапазон [min,max].
 */
export interface GfxProceduralCloudSpec {
  /** Сид генерации. При отсутствии генерируется автоматически. */
  seed?: number
  /** Количество облаков или диапазон (дефолт: 5). */
  count?: number | [number, number]
  /** Область размещения. Если не указана — берётся из размеров мира Terrain‑слоя. */
  area?: GfxCloudPlacementArea
  /** Высота Y или диапазон высот. */
  altitudeY: number | [number, number]
  /**
   * Способ размещения центров облаков.
   * uniform — равномерная случайная выборка,
   * poisson — отбор с минимальной дистанцией minDistance,
   * gridJitter — сетка с джиттером (cell и jitter в 0..1 от cell).
   */
  placement: 'uniform' | 'poisson' | 'gridJitter'
  /** Минимальная дистанция для poisson (обязателен для placement='poisson'). */
  minDistance?: number
  /** Размер ячейки для gridJitter (если не задан — выводится из площади и count). */
  cell?: number
  /** Величина джиттера для gridJitter (0..1, по умолчанию 0.5). */
  jitter?: number
  /** Метапараметры внешнего вида: генератор маппит их в конкретные визуальные поля. */
  appearance?: GfxCloudAppearanceMeta
  /** Общие переопределения визуальных полей для всех сгенерированных items (опционально). */
  advancedOverrides?: GfxCloudItem['advancedOverrides']
}
