/**
 * Типы процедурной генерации террейна
 *
 * Данный файл содержит расширенные типы поверх базовой системы террейна
 * (GfxTerrainConfig/GfxTerrainOp/GfxHeightSampler) для описания спецификаций
 * процедурной генерации, пулов операций и алгоритмов размещения.
 *
 * Координатная система (Y‑up, как в Three.js):
 * - Ось X — горизонталь (влево/вправо относительно центра мира)
 * - Ось Y — вертикаль (высота террейна над/под уровнем 0)
 * - Ось Z — глубина/дальность (ближе/дальше относительно наблюдателя)
 *
 * Центр мира: [0, 0, 0]. При размерах мира
 * `{ width: 300, depth: 200 }` реальные пределы по осям:
 * - X: [-150, +150]
 * - Z: [-100, +100]
 *
 * ВНИМАНИЕ: Исторически поле `height` использовалось для обозначения размера по оси Z
 * (то есть «глубины»), что вводило в заблуждение. В новых типах введено поле `depth`.
 * Для обратной совместимости `height` помечено как @deprecated, но остаётся доступным
 * на переходный период. Во всех новых местах используйте `depth`.
 *
 * Все расстояния и координаты — в МИРОВЫХ единицах (метрах),
 * углы — в радианах, если явно не оговорено иное.
 */

import type { GfxPerlinParams, GfxHeightSampler, GfxTerrainOp, GfxTerrainConfig } from './types'

/**
 * Расширение параметров Perlin для процедурной генерации.
 * Позволяет смещать «узор» шума без смены seed.
 */
export interface GfxProceduralPerlinParams extends GfxPerlinParams {
  /** Сдвиг шума по XZ для вариаций без смены seed: [dx, dz] */
  offset?: [number, number]
  /**
   * Базовое смещение высоты (DC-смещение) в метрах для всей перлин-базы.
   * Позволяет опускать/поднимать рельеф относительно Y=0. По умолчанию 0.
   */
  heightOffset?: number
}

/**
 * Полная спецификация для процедурной генерации террейна.
 * Описывает размеры мира, базовый шум, пул операций и глобальный seed.
 */
export interface GfxProceduralTerrainSpec {
  /**
   * Габариты мира в мировых единицах (метрах). Используются как «пределы»
   * для алгоритмов размещения и построения высотной карты.
   */
  world: {
    /** Ширина мира по оси X */
    width: number
    /**
     * Глубина мира по оси Z.
     *
     * Пример: при `width=300` и `depth=200` допустимые координаты центров по XZ —
     * X в диапазоне [-150..+150], Z в диапазоне [-100..+100].
     */
    depth?: number
    /**
     * @deprecated Используйте `depth` вместо `height`.
     * Исторически означало размер по оси Z (не вертикальную высоту!).
     * Оставлено для обратной совместимости, генераторы и алгоритмы должны
     * трактовать `depth` как приоритетное поле, а при его отсутствии —
     * использовать значение `height`.
     */
    height: number
    /** Плавный спад высот к краям (0..1, доля от края) */
    edgeFade?: number
  }

  /** Базовый шум Perlin (включая расширенный offset) */
  base: GfxProceduralPerlinParams

  /** Пул рецептов, из которых будут генерироваться операции рельефа */
  pool: GfxTerrainOpPool

  /** Глобальный сид для детерминированности */
  seed: number
}

/**
 * Глобальные настройки пула и набор рецептов операций рельефа.
 */
export interface GfxTerrainOpPool {
  global?: {
    /** Глобальный множитель интенсивности для всех операций */
    intensityScale?: number
    /** Ограничение суммарного количества операций (после развёртки рецептов) */
    maxOps?: number
  }
  /** Набор рецептов генерации различных типов рельефа */
  recipes: GfxTerrainOpRecipe[]
}

/**
 * Рецепт генерации операций для конкретного типа рельефа.
 * Один рецепт может порождать НЕСКОЛЬКО GfxTerrainOp (например, кратер/террасы/хребет).
 */
export interface GfxTerrainOpRecipe {
  /** Тип рельефа */
  kind: 'hill' | 'basin' | 'ridge' | 'valley' | 'crater' | 'plateau' | 'terrace' | 'dune'

  /**
   * Режим применения смещения высоты. 'auto' подбирает типичный режим для kind:
   * hill/ridge/dune → add; basin/valley → sub; plateau → set (или add с малым falloff);
   * crater → комбинированно; terrace → серия set/add.
   */
  mode?: 'auto' | 'add' | 'sub' | 'set'

  /** Количество операций (фиксированное или диапазон) */
  count: number | [number, number]

  /** Алгоритм размещения центров операций */
  placement: GfxPlacementSpec

  /** Базовый радиус в метрах (фиксированный или диапазон) для эллиптической формы */
  radius: number | [number, number]

  /** Отношение Rz/Rx; по умолчанию 1 (круг) */
  aspect?: [number, number]

  /** Амплитуда изменения высоты (фиксированная или диапазон) */
  intensity: number | [number, number]

  /** Разброс угла поворота (в радианах), если релевантно */
  rotation?: [number, number]

  /**
   * Включить случайный поворот фигуры, если явный диапазон `rotation` не задан.
   * По умолчанию выключено (угол = 0 радиан). При `true` поворот выбирается случайно
   * из полного круга [-π..π]. Если указан `rotation`, он имеет приоритет над этим флагом.
   */
  randomRotationEnabled?: boolean

  /**
   * Ориентация фигур относительно центра/касательно или в фиксированном/случайном направлении.
   *
   * Унифицированный способ управлять поворотом операций, сочетающий типовую логику
   * (радиально/касательно) и дельту поворота (фикс/диапазон). Если задано `orientation`,
   * поля `rotation` и `randomRotationEnabled` игнорируются.
   *
   * Варианты использования:
   * - 'radial' — ориентировать от центра (по умолчанию берётся центр кольцевого placement);
   * - 'tangent' — ориентировать касательно кольца (вправо от радиуса);
   * - 'fixed' — зафиксированный общий угол (через rotation как дельту);
   * - 'random' — случайный угол (дельта из [-π..π] либо из указанного диапазона rotation).
   *
   * Объектная форма позволяет задать:
   * - mode: режим ('radial' | 'tangent' | 'fixed' | 'random');
   * - center: [x, z] — явный центр для radial/tangent (по умолчанию — из placement.center при type='ring');
   * - invert: boolean — инверсия направления (для radial — «к центру», для tangent — CW/CCW);
   * - rotation: число или [min, max] — дельта к базовому углу (для fixed/random/тонкой настройки radial/tangent).
   */
  orientation?:
    | 'radial'
    | 'tangent'
    | 'fixed'
    | 'random'
    | {
        mode: 'radial' | 'tangent' | 'fixed' | 'random'
        center?: [number, number]
        invert?: boolean
        rotation?: number | [number, number]
      }

  /**
   * Функция затухания эффекта по краям.
   * Дополнительно поддерживается 'plateau' — режим с плоским ядром (см. flatInner).
   */
  falloff?: 'smoothstep' | 'gauss' | 'linear' | 'plateau'

  /**
   * Доля «плоского ядра» для falloff='plateau' (0..1).
   * Определяет, при каком значении t (1 — центр, 0 — край) вклад держится равным 1.
   * Внешняя полоса (1 - flatInner) используется для плавного спада к нулю.
   */
  flatInner?: number

  /**
   * Предпочтения по рельефу (высота/уклон/избежание пересечений).
   * Применяются как «веса» к выборке кандидатов, не как жёсткий фильтр.
   */
  bias?: GfxBiasSpec

  /** Случайный сдвиг центров (дрожание) */
  jitter?: { center?: number }

  /** Шаг вдоль линии (для "stroke"‑размещения), в метрах */
  step?: number

  /**
   * Заполнить прямоугольную область placement.area ОДНОЙ операцией прямоугольной формы.
   * Поддерживается для kind: 'plateau' | 'valley' при area.kind === 'rect'.
   * Игнорирует count и центр; радиусы берутся как половины ширины/глубины области.
   */
  coverArea?: boolean

  /**
   * Зафиксировать параметры рецепта (radius/aspect/intensity/rotation/falloff/flatInner)
   * на уровне всей серии точек. Полезно для «плиточной» укладки (узкие полосы),
   * чтобы исключить визуальные перепады между соседними операциями.
   *
   * По умолчанию параметры выбираются независимо для каждой точки.
   */
  lockParams?: boolean
}

/**
 * Алгоритмы размещения центров операций.
 * Координаты XZ — в мировых единицах; генерация детерминирована сидом генератора.
 */
export type GfxPlacementSpec =
  | { type: 'uniform', area?: GfxPlacementArea }
  | { type: 'poisson', minDistance: number, area?: GfxPlacementArea }
  | { type: 'gridJitter', cell: number, jitter?: number, area?: GfxPlacementArea }
  | { type: 'ring', center: [number, number], rMin: number, rMax: number, area?: GfxPlacementArea }

/**
 * Параметры «предпочтений» для отбора точек размещения.
 * min/max — допустимые интервалы, weight — сила влияния на вероятность.
 */
export interface GfxBiasSpec {
  /** Фильтр по высоте (в метрах) */
  preferHeight?: { min?: number, max?: number, weight?: number }
  /** Фильтр по уклону (в радианах) */
  preferSlope?: { min?: number, max?: number, weight?: number }
  /** Избегать пересечений с существующими и уже выбранными операциями */
  avoidOverlap?: boolean
}

/**
 * Геометрическая область, внутри которой разрешено размещение операций.
 * Описывает горизонтальную область на плоскости XZ (вид сверху).
 * В Y-up системе координат (Three.js):
 * - x: горизонтальная координата (лево-право)
 * - z: глубина/дальность (ближе-дальше)
 * - width: ширина области по оси X
 * - depth: размер области по оси Z (не вертикальная высота!)
 *
 * Пример корректного прямоугольника при мире `{ width: 300, depth: 200 }`:
 * `{ kind: 'rect', x: 0, z: 0, width: 100, depth: 80 }`
 * — центрированная область 100×80 в границах X [-50..+50], Z [-40..+40].
 */
export type GfxPlacementArea =
  | { kind: 'rect', x: number, z: number, width: number, depth: number }
  | { kind: 'circle', x: number, z: number, radius: number }

/**
 * Дополнительные опции для генерации пула операций.
 * Позволяют ограничить область и прокинуть внешний сэмплер высот.
 */
export interface GfxOpsGenerationOptions {
  /** Ограничение по области генерации */
  area?: GfxPlacementArea
  /** Внешний сэмплер высот для bias-фильтров и проверки пересечений */
  sampler?: GfxHeightSampler
}

// Пустые экспорты, чтобы облегчить импорт потребителям API и подсветку IDE
export type { GfxTerrainOp, GfxTerrainConfig }
