/**
 * –í–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —Å–∫—Ä–∏–ø—Ç–∏–Ω–≥–∞.
 * –¢–æ–ª—å–∫–æ JavaScript. –°—Ç—Ä–æ–∫–∏ –±–µ–∑ –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
 */
export const getDefaultScript = (): string => {
  return `// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è sceneApi –≤ ScriptingPanel
const overview = sceneApi.getSceneOverview()
console.log('–û–±—ä–µ–∫—Ç–æ–≤ –≤ —Å—Ü–µ–Ω–µ:', overview.totalObjects)
console.log('–≠–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:', overview.totalInstances)
console.log('–°–ª–æ–∏:', overview.layers)

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
const stats = sceneApi.getSceneStats()
console.log('–û–±—â–∏–µ –æ–±—ä–µ–∫—Ç—ã:', stats.total.objects)
console.log('–í–∏–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã:', stats.visible.objects)

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
const objects = sceneApi.getSceneObjects()
objects.forEach(obj => {
  console.log('–û–±—ä–µ–∫—Ç: ' + obj.name + ', –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤: ' + obj.primitiveCount)
})

// –°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
if (objects.length > 0) {
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: 'Random' | 'RandomNoCollision' | 'PlaceAround'
  const result = sceneApi.addInstances(
    objects[0].uuid,
    undefined, // layerId - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è
    1, // count
    { strategy: 'RandomNoCollision' } // placementStrategy
  )
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞:', result)
}

// –ü—Ä–∏–º–µ—Ä PlaceAround: 8 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø–æ –∫—Ä—É–≥—É –≤–æ–∫—Ä—É–≥ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∞–Ω—Å–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
if (objects.length > 0) {
  const res2 = sceneApi.addInstances(
    objects[0].uuid,
    undefined,
    8,
    {
      strategy: 'PlaceAround',
      metadata: {
        targetObjectUuid: objects[0].uuid,
        minDistance: 1.5,
        maxDistance: 4.0,
        angleOffset: 0,
        distributeEvenly: true,
        onlyHorizontal: true
      }
    }
  )
  console.log('PlaceAround:', res2)
}`
}

/**
 * –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ —Ç–µ—Ä—Ä–µ–π–Ω–æ–≤ –¥–ª—è ScriptingPanel
 * –†–∞–∑–¥–µ–ª–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 */
export const getTerrainTemplateGroups = () => {
  
  // üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢
  const quickStart = {
    '–ü—Ä–æ—Å—Ç—ã–µ —Ö–æ–ª–º—ã': `// –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Ö–æ–ª–º—ã –∑–∞ 30 —Å–µ–∫—É–Ω–¥
const result = await sceneApi.createProceduralLayer({
  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: X ‚àà [-width/2..+width/2], Z ‚àà [-depth/2..+depth/2]
  world: { width: 200, depth: 200, edgeFade: 0.1 },
  base: { 
    seed: 42, 
    amplitude: 8, 
    octaveCount: 3, 
    persistence: 0.4, 
    width: 128, 
    height: 128 
  },
  pool: { recipes: [] }, // –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  seed: 42
}, { 
  name: '–ú–æ–∏ –ø–µ—Ä–≤—ã–µ —Ö–æ–ª–º—ã', 
  visible: true 
})

console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', result)`,

    '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Ä—Ä–µ–π–Ω': `// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å –Ω–∏–∑–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
const testSpec = {
  // –¶–µ–Ω—Ç—Ä –º–∏—Ä–∞: [0,0,0]; Z ‚Äî –≥–ª—É–±–∏–Ω–∞
  world: { width: 100, depth: 100, edgeFade: 0.05 },
  base: { 
    seed: 123, 
    octaveCount: 2, 
    amplitude: 3, 
    persistence: 0.3, 
    width: 128, 
    height: 128 
  },
  pool: { 
    global: { maxOps: 10 },
    recipes: [
      { kind: 'hill', count: 5, placement: { type: 'uniform' }, radius: 8, intensity: 2 }
    ]
  },
  seed: 123
}

const test = await sceneApi.createProceduralLayer(testSpec, { 
  name: '–¢–µ—Å—Ç', 
  visible: true 
})

console.log('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Ä—Ä–µ–π–Ω:', test)`
  }

  // üéØ –ì–û–¢–û–í–´–ï –†–ï–®–ï–ù–ò–Ø
  const readySolutions = {
    '–î–æ–ª–∏–Ω–∞ —Å –≥–æ—Ä–∞–º–∏': `// –î–æ–ª–∏–Ω–∞, –æ–∫—Ä—É–∂–µ–Ω–Ω–∞—è –≥–æ—Ä–Ω—ã–º–∏ —Ü–µ–ø—è–º–∏ (fit-–ø–æ–¥—Ö–æ–¥: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤)
// 1) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∏—Ä–∞ –∏ –æ–±–ª–∞—Å—Ç–∏
const world = { width: 300, depth: 200 }
const edgeFade = 0.15
const centerRect = { x: -140, z: -10, width: 280, depth: 20 }
const southRect = { x: -150, z: -80, width: 300, depth: 40 }
const northRect = { x: -150, z: 60, width: 300, depth: 40 }

// 2) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ fit-—Ö–µ–ª–ø–µ—Ä—ã
const v = sceneApi.terrainHelpers.valleyFitToRecipes(
  centerRect,
  { thickness: 40, depth: 8, direction: 'auto', continuity: 'continuous' },
  world,
  edgeFade
)
const r = sceneApi.terrainHelpers.ridgeBandFitToRecipes(
  northRect,
  {
    thickness: 30,
    height: 10,
    direction: 'auto',
    continuity: 'segmented',
    pattern: {
      count: [10, 14],
      radius: [18, 26],
      aspect: [0.9, 1.3],
      intensity: [8, 15],
      step: 25,
      falloff: 'smoothstep'
    }
  },
  world,
  edgeFade
)

// –Æ–∂–Ω—ã–µ —Ö–æ–ª–º—ã –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç—ã–º–∏ hill-—Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (–¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è)
const southHills = {
  kind: 'hill',
  count: [8, 12],
  placement: { type: 'uniform', area: southRect },
  radius: [14, 22],
  intensity: [7, 14],
  falloff: 'gauss'
}

let recipes = [ ...v.recipes, southHills, ...r.recipes ]

// 3) –ë—é–¥–∂–µ—Ç: –æ—Ü–µ–Ω–∫–∞, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–¥—Ä–µ–∑–∫–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
let maxOps = sceneApi.terrainHelpers.suggestGlobalBudget(recipes, 0.2)
const trimmed = sceneApi.terrainHelpers.autoBudget(recipes, maxOps)
recipes = trimmed.trimmedRecipes

// 4) –°–±–æ—Ä–∫–∞ spec –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ—è
const spec = {
  world: { ...world, edgeFade },
  base: { seed: 1001, octaveCount: 4, amplitude: 6, persistence: 0.5, width: 128, height: 128 },
  pool: { global: { intensityScale: 1.2, maxOps }, recipes },
  seed: 1001
}

const layer = await sceneApi.createProceduralLayer(spec, { 
  name: '–î–æ–ª–∏–Ω–∞ –î—Ä–∞–∫–æ–Ω–æ–≤ (fit)', 
  visible: true 
})

console.log('–°–æ–∑–¥–∞–Ω–∞ –¥–æ–ª–∏–Ω–∞ (fit):', layer)`,

    '–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤': `// –ö—Ä—É–≥–ª—ã–π –æ—Å—Ç—Ä–æ–≤ —Å –∫—Ä–∞—Ç–µ—Ä–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ
const islandSpec = {
  // –ö—Ä—É–≥–ª—ã–π –æ—Å—Ç—Ä–æ–≤, —Ü–µ–Ω—Ç—Ä –º–∏—Ä–∞ ‚Äî [0,0]
  world: { width: 200, depth: 200, edgeFade: 0.3 },
  base: { 
    seed: 2024, 
    octaveCount: 5, 
    amplitude: 4, 
    persistence: 0.6, 
    width: 128, 
    height: 128 
  },
  pool: {
    global: { intensityScale: 1.0, maxOps: 25 },
    recipes: [
      // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤—É–ª–∫–∞–Ω
      {
        kind: 'crater',
        count: 1,
        placement: { type: 'ring', center: [0, 0], rMin: 0, rMax: 5 },
        radius: [25, 30],
        intensity: [15, 20],
        falloff: 'gauss'
      },
      // –•–æ–ª–º—ã –≤–æ–∫—Ä—É–≥ –≤—É–ª–∫–∞–Ω–∞
      {
        kind: 'hill',
        count: [8, 12],
        placement: { type: 'ring', center: [0, 0], rMin: 40, rMax: 70 },
        radius: [8, 15],
        intensity: [4, 8],
        falloff: 'smoothstep',
        bias: { avoidOverlap: true }
      },
      // –ü—Ä–∏–±—Ä–µ–∂–Ω—ã–µ —É—Ç–µ—Å—ã
      {
        kind: 'ridge',
        count: [4, 6],
        placement: { type: 'ring', center: [0, 0], rMin: 80, rMax: 95 },
        radius: [6, 12],
        aspect: [0.2, 0.4],
        intensity: [3, 6],
        step: 15,
        falloff: 'linear'
      }
    ]
  },
  seed: 2024
}

const island = await sceneApi.createProceduralLayer(islandSpec, {
  name: '–í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤',
  visible: true
})

console.log('–°–æ–∑–¥–∞–Ω –æ—Å—Ç—Ä–æ–≤:', island)`,

    '–ê—Ä—Ö–∏–ø–µ–ª–∞–≥ –æ—Å—Ç—Ä–æ–≤–æ–≤': `// –ì—Ä—É–ø–ø–∞ –æ—Å—Ç—Ä–æ–≤–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
const archipelagoSpec = {
  // –ú–∏—Ä 400√ó300 (X√óZ). –î–∏–∞–ø–∞–∑–æ–Ω—ã: X [-200..200], Z [-150..150]
  world: { width: 400, depth: 300, edgeFade: 0.2 },
  base: { 
    seed: 3333, 
    octaveCount: 3, 
    amplitude: 2, 
    persistence: 0.3, 
    width: 128, 
    height: 128,
    // –ö–õ–Æ–ß–ï–í–û–ï: –æ–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ–ª—å–µ—Ñ–∞ –Ω–∏–∂–µ 0, —á—Ç–æ–±—ã –≤–æ–¥–∞ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–∞ ¬´–Ω–∏–∑–∏–Ω—É¬ª
    heightOffset: -1.5
  },
  pool: {
    global: { intensityScale: 1.5, maxOps: 60 },
    recipes: [
      // –ì–ª–∞–≤–Ω—ã–π –æ—Å—Ç—Ä–æ–≤
      {
        kind: 'hill',
        count: 1,
        // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö Z: [70..150], X: [150..250]
        placement: { type: 'uniform', area: { kind: 'rect', x: 150, z: 70, width: 100, depth: 80 } },
        radius: [40, 50],
        intensity: [12, 18],
        falloff: 'smoothstep'
      },
      // –°—Ä–µ–¥–Ω–∏–µ –æ—Å—Ç—Ä–æ–≤–∞
      {
        kind: 'plateau',
        count: [3, 5],
        placement: { type: 'poisson', minDistance: 80 },
        radius: [20, 35],
        intensity: [6, 10],
        falloff: 'linear',
        bias: { preferHeight: { min: -1, max: 2, weight: 0.7 } }
      },
      // –ú–µ–ª–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∫–∏
      {
        kind: 'hill',
        count: [8, 15],
        placement: { type: 'uniform' },
        radius: [5, 12],
        intensity: [2, 5],
        falloff: 'gauss',
        bias: { 
          preferHeight: { min: -2, max: 1, weight: 0.8 },
          avoidOverlap: true 
        }
      }
    ]
  },
  seed: 3333
}

const archipelago = await sceneApi.createProceduralLayer(archipelagoSpec, {
  name: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∞—Ä—Ö–∏–ø–µ–ª–∞–≥',
  visible: true
})

console.log('–°–æ–∑–¥–∞–Ω –∞—Ä—Ö–∏–ø–µ–ª–∞–≥:', archipelago)`,

    '–•–æ–ª–º–∏—Å—Ç–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å': `// –ú—è–≥–∫–∏–µ –ø–µ—Ä–µ–∫–∞—Ç—ã–≤–∞—é—â–∏–µ—Å—è —Ö–æ–ª–º—ã
const hillsSpec = {
  world: { width: 250, depth: 250, edgeFade: 0.1 },
  base: { 
    seed: 4444, 
    octaveCount: 4, 
    amplitude: 5, 
    persistence: 0.4, 
    width: 128, 
    height: 128 
  },
  pool: {
    global: { intensityScale: 0.8, maxOps: 50 },
    recipes: [
      // –ö—Ä—É–ø–Ω—ã–µ —Ö–æ–ª–º—ã
      {
        kind: 'hill',
        count: [12, 18],
        placement: { type: 'poisson', minDistance: 25 },
        radius: [15, 25],
        aspect: [0.8, 1.2],
        intensity: [4, 8],
        falloff: 'smoothstep',
        rotation: [0, Math.PI * 2]
      },
      // –ú–µ–ª–∫–∏–µ —Ö–æ–ª–º–∏–∫–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
      {
        kind: 'hill',
        count: [20, 30],
        placement: { type: 'uniform' },
        radius: [5, 12],
        intensity: [1, 3],
        falloff: 'gauss',
        bias: { avoidOverlap: true }
      }
    ]
  },
  seed: 4444
}

const hills = await sceneApi.createProceduralLayer(hillsSpec, {
  name: '–ü–∞—Å—Ç–æ—Ä–∞–ª—å–Ω—ã–µ —Ö–æ–ª–º—ã',
  visible: true
})

console.log('–°–æ–∑–¥–∞–Ω—ã —Ö–æ–ª–º—ã:', hills)`
  }

  // üß© FIT-–•–ï–õ–ü–ï–†–´
  const fitHelpers = {
    '–î–æ–ª–∏–Ω–∞ (fit)': `// –ü—Ä–æ—Å—Ç–∞—è –¥–æ–ª–∏–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ—Å—å –º–∏—Ä (fit)
const world = { width: 300, depth: 200 }
const edgeFade = 0.15
const centerRect = { x: -140, z: -10, width: 280, depth: 20 }

const v = sceneApi.terrainHelpers.valleyFitToRecipes(centerRect, { thickness: 40, depth: 8, direction: 'auto', continuity: 'continuous' }, world, edgeFade)
const maxOps = sceneApi.terrainHelpers.suggestGlobalBudget(v.recipes, 0.2)
const spec = {
  world: { ...world, edgeFade },
  base: { seed: 42, octaveCount: 4, amplitude: 6, persistence: 0.5, width: 128, height: 128 },
  pool: { global: { intensityScale: 1.0, maxOps }, recipes: v.recipes },
  seed: 42
}
const res = await sceneApi.createProceduralLayer(spec, { name: 'ValleyFit', visible: true })
console.log('ValleyFit:', res, v.warnings)`,

    '–°–µ–≤–µ—Ä–Ω–∞—è –≥—Ä—è–¥–∞ (fit)': `// –ì—Ä—è–¥–∞ –ø–æ —Å–µ–≤–µ—Ä–Ω–æ–π –∫—Ä–æ–º–∫–µ (fit)
const world = { width: 300, depth: 200 }
const edgeFade = 0.15
const northRect = { x: -150, z: 60, width: 300, depth: 40 }

const r = sceneApi.terrainHelpers.ridgeBandFitToRecipes(northRect, { thickness: 30, height: 10, direction: 'auto', continuity: 'continuous' }, world, edgeFade)
const maxOps2 = sceneApi.terrainHelpers.suggestGlobalBudget(r.recipes, 0.2)
const spec2 = {
  world: { ...world, edgeFade },
  base: { seed: 777, octaveCount: 4, amplitude: 6, persistence: 0.5, width: 128, height: 128 },
  pool: { global: { intensityScale: 1.0, maxOps: maxOps2 }, recipes: r.recipes },
  seed: 777
}
const res2 = await sceneApi.createProceduralLayer(spec2, { name: 'RidgeFit North', visible: true })
console.log('RidgeFit:', res2, r.warnings)`
  }

  // üèîÔ∏è –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –õ–ê–ù–î–®–ê–§–¢–´
  const specialLandscapes = {
    '–ü–µ—Å—á–∞–Ω—ã–µ –¥—é–Ω—ã': `// –ü—É—Å—Ç—ã–Ω–Ω—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç —Å –¥—é–Ω–∞–º–∏
const dunesSpec = {
  world: { width: 200, depth: 200, edgeFade: 0.15 },
  base: { 
    seed: 46283, 
    octaveCount: 3, 
    amplitude: 4, 
    persistence: 0.4, 
    width: 128, 
    height: 128 
  },
  pool: {
    recipes: [
      { 
        kind: 'dune', 
        count: [20, 30], 
        placement: { type: 'gridJitter', cell: 16, jitter: 0.6 }, 
        radius: [8, 14], 
        aspect: [0.2, 0.5], 
        rotation: [-0.3, 0.3], 
        intensity: [1, 3], 
        falloff: 'smoothstep' 
      },
      { 
        kind: 'basin', 
        count: [3, 6], 
        placement: { type: 'poisson', minDistance: 40 }, 
        radius: [15, 25], 
        intensity: [2, 4], 
        bias: { preferHeight: { max: 2, weight: 0.8 } } 
      }
    ]
  },
  seed: 7777
}

const dunes = await sceneApi.createProceduralLayer(dunesSpec, { 
  name: '–ü–µ—Å—á–∞–Ω—ã–µ –¥—é–Ω—ã', 
  visible: true 
})

console.log('–°–æ–∑–¥–∞–Ω—ã –¥—é–Ω—ã:', dunes)`,

    '–õ—É–Ω–Ω—ã–π –∫—Ä–∞—Ç–µ—Ä': `// –ö—Ä–∞—Ç–µ—Ä–Ω—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç –∫–∞–∫ –Ω–∞ –õ—É–Ω–µ
const craterSpec = {
  world: { width: 300, depth: 300, edgeFade: 0.1 },
  base: { 
    seed: 8888, 
    octaveCount: 2, 
    amplitude: 2, 
    persistence: 0.3, 
    width: 128, 
    height: 128 
  },
  pool: {
    global: { intensityScale: 1.5, maxOps: 40 },
    recipes: [
      // –ë–æ–ª—å—à–∏–µ –∫—Ä–∞—Ç–µ—Ä—ã
      {
        kind: 'crater',
        count: [3, 5],
        placement: { type: 'poisson', minDistance: 60 },
        radius: [20, 35],
        intensity: [8, 15],
        falloff: 'gauss'
      },
      // –°—Ä–µ–¥–Ω–∏–µ –∫—Ä–∞—Ç–µ—Ä—ã
      {
        kind: 'crater',
        count: [8, 12],
        placement: { type: 'uniform' },
        radius: [8, 15],
        intensity: [3, 8],
        falloff: 'smoothstep',
        bias: { avoidOverlap: true }
      },
      // –ú–µ–ª–∫–∏–µ –∫—Ä–∞—Ç–µ—Ä—ã
      {
        kind: 'crater',
        count: [15, 25],
        placement: { type: 'uniform' },
        radius: [3, 8],
        intensity: [1, 4],
        falloff: 'gauss'
      }
    ]
  },
  seed: 8888
}

const lunar = await sceneApi.createProceduralLayer(craterSpec, {
  name: '–õ—É–Ω–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å',
  visible: true
})

console.log('–°–æ–∑–¥–∞–Ω–∞ –ª—É–Ω–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å:', lunar)`,

    '–ö–∞–Ω—å–æ–Ω —Å –ø–ª–∞—Ç–æ': `// –°–∏—Å—Ç–µ–º–∞ –∫–∞–Ω—å–æ–Ω–æ–≤ —Å –ø–ª–æ—Å–∫–∏–º–∏ –ø–ª–∞—Ç–æ
const canyonSpec = {
  world: { width: 400, depth: 250, edgeFade: 0.2 },
  base: { 
    seed: 9001, 
    octaveCount: 4, 
    amplitude: 8, 
    persistence: 0.5, 
    width: 128, 
    height: 128 
  },
  pool: {
    global: { intensityScale: 1.1, maxOps: 50 },
    recipes: [
      // –í—ã—Å–æ–∫–∏–µ –ø–ª–∞—Ç–æ
      {
        kind: 'plateau',
        count: [4, 6],
        placement: { type: 'poisson', minDistance: 50 },
        radius: [25, 40],
        intensity: [10, 18],
        falloff: 'linear',
        aspect: [0.7, 1.3]
      },
      // –ö–∞–Ω—å–æ–Ω—ã –º–µ–∂–¥—É –ø–ª–∞—Ç–æ
      {
        kind: 'valley',
        count: [3, 5],
        placement: { type: 'uniform' },
        radius: [15, 25],
        aspect: [0.2, 0.4],
        intensity: [12, 20],
        step: 30,
        falloff: 'smoothstep',
        bias: { preferHeight: { min: 5, max: 15, weight: 0.8 } }
      }
    ]
  },
  seed: 9001
}

const canyon = await sceneApi.createProceduralLayer(canyonSpec, {
  name: '–ö–∞–Ω—å–æ–Ω—ã –∏ –ø–ª–∞—Ç–æ',
  visible: true
})

console.log('–°–æ–∑–¥–∞–Ω—ã –∫–∞–Ω—å–æ–Ω—ã:', canyon)`
  }

  // üé® –ü–†–û–î–í–ò–ù–£–¢–´–ï –ü–†–ò–ú–ï–†–´
  const advancedExamples = {
    '–ì–æ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤': `// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–æ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å —Ö—Ä–µ–±—Ç–∞–º–∏
const mountainRangeSpec = {
  world: { width: 500, depth: 300, edgeFade: 0.2 },
  base: { 
    seed: 7777, 
    octaveCount: 6, 
    amplitude: 12, 
    persistence: 0.65, 
    width: 128, 
    height: 128 
  },
  pool: {
    global: { intensityScale: 1.3, maxOps: 70 },
    recipes: [
      // –ì–ª–∞–≤–Ω—ã–π —Ö—Ä–µ–±–µ—Ç
      {
        kind: 'ridge',
        count: 1,
        // –ì–ª–∞–≤–Ω—ã–π —Ö—Ä–µ–±–µ—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ
        placement: { type: 'ring', center: [0, 0], rMin: 0, rMax: 2 },
        radius: 120,
        aspect: 0.25,
        intensity: 20,
        step: 30,
        rotation: Math.PI * 0.15,
        falloff: 'smoothstep'
      },
      // –ë–æ–∫–æ–≤—ã–µ –æ—Ç—Ä–æ–≥–∏
      {
        kind: 'ridge',
        count: [6, 10],
        placement: { type: 'ring', center: [0, 0], rMin: 80, rMax: 150 },
        radius: [25, 50],
        aspect: [0.2, 0.4],
        intensity: [8, 15],
        step: [15, 25],
        rotation: [0, Math.PI * 2],
        falloff: 'gauss',
        bias: { preferHeight: { min: 8, max: 25, weight: 0.7 } }
      },
      // –ü–∏–∫–∏
      {
        kind: 'hill',
        count: [10, 15],
        placement: { type: 'poisson', minDistance: 35 },
        radius: [8, 15],
        intensity: [6, 12],
        falloff: 'gauss',
        bias: { 
          preferHeight: { min: 15, max: 40, weight: 0.9 },
          preferSlope: { min: 0.1, max: 0.6, weight: 0.5 }
        }
      }
    ]
  },
  seed: 7777
}

const mountains = await sceneApi.createProceduralLayer(mountainRangeSpec, {
  name: '–ì–æ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ –î—Ä–∞–∫–æ–Ω—å–∏ –ó—É–±—ã',
  visible: true
})

console.log('–ì–æ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–æ–∑–¥–∞–Ω:', mountains)`,

    '–ü—Ä–∏–±—Ä–µ–∂–Ω–∞—è –∑–æ–Ω–∞': `// –ò–∑—Ä–µ–∑–∞–Ω–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ —Å –±—É—Ö—Ç–∞–º–∏
const coastalSpec = {
  world: { width: 400, depth: 200, edgeFade: 0.25 },
  base: { 
    seed: 9999, 
    octaveCount: 3, 
    amplitude: 3, 
    persistence: 0.4, 
    width: 64, 
    height: 32 
  },
  pool: {
    global: { intensityScale: 1.1, maxOps: 45 },
    recipes: [
      // –ë–µ—Ä–µ–≥–æ–≤–∞—è –ª–∏–Ω–∏—è (—Å—É—à–∞)
      {
        kind: 'plateau',
        count: [3, 5],
        // –ü—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –º–∏—Ä–∞: X [0..200]
        placement: { 
          type: 'uniform',
          area: { kind: 'rect', x: 0, z: -100, width: 200, depth: 200 }
        },
        radius: [40, 70],
        aspect: [0.6, 1.4],
        intensity: [5, 8],
        falloff: 'linear',
        rotation: [Math.PI * 0.4, Math.PI * 0.6]
      },
      // –ë—É—Ö—Ç—ã (—É–≥–ª—É–±–ª–µ–Ω–∏—è)
      {
        kind: 'basin',
        count: [4, 7],
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ X [-50..50]
        placement: { 
          type: 'uniform',
          area: { kind: 'rect', x: -50, z: -100, width: 100, depth: 200 }
        },
        radius: [20, 35],
        aspect: [1.2, 2.0],
        intensity: [4, 7],
        falloff: 'smoothstep',
        bias: { preferHeight: { min: 2, max: 6, weight: 0.8 } }
      },
      // –ü—Ä–∏–±—Ä–µ–∂–Ω—ã–µ —Å–∫–∞–ª—ã
      {
        kind: 'ridge',
        count: [2, 4],
        // –õ–µ–≤–∞—è –∫—Ä–æ–º–∫–∞: X [-200..-80]
        placement: { 
          type: 'uniform',
          area: { kind: 'rect', x: -200, z: -100, width: 120, depth: 200 }
        },
        radius: [15, 25],
        aspect: [0.1, 0.3],
        intensity: [8, 15],
        step: [20, 30],
        falloff: 'linear',
        bias: { avoidOverlap: true }
      }
    ]
  },
  seed: 9999
}

const coast = await sceneApi.createProceduralLayer(coastalSpec, {
  name: '–ò–∑—Ä–µ–∑–∞–Ω–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ',
  visible: true
})

console.log('–ü—Ä–∏–±—Ä–µ–∂–Ω–∞—è –∑–æ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞:', coast)`,

    '–ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ': `// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ä—Ä–µ–π–Ω–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤
console.log('–≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–∞–Ω–¥—à–∞—Ñ—Ç–∞...')

const baseResult = await sceneApi.createProceduralLayer({
  world: { width: 300, depth: 300, edgeFade: 0.1 },
  base: { 
    seed: 1000, 
    octaveCount: 4, 
    amplitude: 5, 
    persistence: 0.4, 
    width: 64, 
    height: 64 
  },
  pool: { recipes: [] },
  seed: 1000
}, { name: '–ë–∞–∑–æ–≤—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç' })

console.log('–ë–∞–∑–æ–≤—ã–π –ª–∞–Ω–¥—à–∞—Ñ—Ç:', baseResult)

console.log('–≠—Ç–∞–ø 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–µ–ª—å–µ—Ñ–∞...')

const detailOps = await sceneApi.generateTerrainOpsFromPool({
  recipes: [
    { 
      kind: 'hill', 
      count: [10, 15], 
      placement: { type: 'poisson', minDistance: 20 }, 
      radius: [8, 15], 
      intensity: [2, 5],
      falloff: 'smoothstep'
    },
    {
      kind: 'valley',
      count: [2, 4],
      placement: { type: 'uniform' },
      radius: [12, 20],
      intensity: [3, 6],
      aspect: [0.4, 0.8]
    }
  ]
}, 2000)

console.log('–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ—Ç–∞–ª–µ–π:', detailOps)

console.log('–≠—Ç–∞–ø 3: –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ç–µ—Ä—Ä–µ–π–Ω–µ...')

const objects = sceneApi.getSceneObjects()
if (objects.length > 0) {
  const instanceResult = sceneApi.addInstances(
    objects[0].uuid, 
    undefined, 
    10, 
    { strategy: 'RandomNoCollision' }
  )
  console.log('–†–∞–∑–º–µ—â–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã:', instanceResult)
} else {
  console.log('–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è')
}

console.log('‚úì –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')`
  }

  // üõ†Ô∏è –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –ò –£–¢–ò–õ–ò–¢–´
  const utilities = {
    '–ê–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω—ã': `// –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
console.log('=== –ê–ù–ê–õ–ò–ó –°–¶–ï–ù–´ ===')

// –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
const overview = sceneApi.getSceneOverview()
console.log('–ò–º—è —Å—Ü–µ–Ω—ã:', overview.sceneName)
console.log('–í—Å–µ–≥–æ –æ–±—ä–µ–∫—Ç–æ–≤:', overview.totalObjects)
console.log('–í—Å–µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:', overview.totalInstances)

// –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
const stats = sceneApi.getSceneStats()
console.log('\\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===')
console.log('–û–±—ä–µ–∫—Ç—ã - –æ–±—â–∏–µ/–≤–∏–¥–∏–º—ã–µ:', stats.total.objects + '/' + stats.visible.objects)
console.log('–≠–∫–∑–µ–º–ø–ª—è—Ä—ã - –æ–±—â–∏–µ/–≤–∏–¥–∏–º—ã–µ:', stats.total.instances + '/' + stats.visible.instances)
console.log('–°–ª–æ–∏ - –æ–±—â–∏–µ/–≤–∏–¥–∏–º—ã–µ:', stats.total.layers + '/' + stats.visible.layers)
console.log('–¢–∏–ø—ã –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤:', stats.primitiveTypes.join(', '))

// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—è—Ö
const layers = sceneApi.getAvailableLayers()
console.log('\\n=== –°–õ–û–ò ===')
layers.forEach(layer => {
  const objectCount = overview.layers.find(l => l.id === layer.id)?.objectCount || 0
  console.log('–°–ª–æ–π "' + layer.name + '": ' + objectCount + ' –æ–±—ä–µ–∫—Ç–æ–≤, –≤–∏–¥–∏–º–æ—Å—Ç—å: ' + layer.visible)
})

// –î–µ—Ç–∞–ª–∏ –æ–±—ä–µ–∫—Ç–æ–≤
console.log('\\n=== –û–ë–™–ï–ö–¢–´ ===')
overview.objects.forEach(obj => {
  console.log('–û–±—ä–µ–∫—Ç "' + obj.name + '":')
  console.log('  - UUID: ' + obj.uuid)
  console.log('  - –ü—Ä–∏–º–∏—Ç–∏–≤–æ–≤: ' + obj.primitiveCount + ' (' + obj.primitiveTypes.join(', ') + ')')
  console.log('  - –≠–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: ' + obj.instanceCount)
  console.log('  - –°–ª–æ–π: ' + (obj.layerId || '–Ω–µ –∑–∞–¥–∞–Ω'))
  console.log('  - –í–∏–¥–∏–º–æ—Å—Ç—å: ' + (obj.visible !== false ? '–≤–∏–¥–∏–º' : '—Å–∫—Ä—ã—Ç'))
  if (obj.boundingBox) {
    const bb = obj.boundingBox
    console.log('  - –†–∞–∑–º–µ—Ä—ã: ' + 
      (bb.max[0] - bb.min[0]).toFixed(1) + ' x ' + 
      (bb.max[1] - bb.min[1]).toFixed(1) + ' x ' + 
      (bb.max[2] - bb.min[2]).toFixed(1))
  }
  console.log('')
})`,

    '–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤': `// –í—ã—Ä–æ–≤–Ω—è—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–µ—Ä—Ä–µ–π–Ω—É
const layers = sceneApi.getAvailableLayers()
const terrainLayers = layers.filter(layer => 
  layer.name.toLowerCase().includes('—Ç–µ—Ä—Ä–µ–π–Ω') || 
  layer.name.toLowerCase().includes('–ª–∞–Ω–¥—à–∞—Ñ—Ç') ||
  layer.name.toLowerCase().includes('terrain')
)

if (terrainLayers.length === 0) {
  console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–ª–æ–µ–≤ —Ç–µ—Ä—Ä–µ–π–Ω–∞ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è')
} else {
  console.log('–ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ä—Ä–µ–π–Ω-—Å–ª–æ–µ–≤:', terrainLayers.length)
  
  // –í–∑—è—Ç—å –ø–µ—Ä–≤—ã–π —Ç–µ—Ä—Ä–µ–π–Ω-—Å–ª–æ–π
  const terrainLayer = terrainLayers[0]
  console.log('–í—ã—Ä–∞–≤–Ω–∏–≤–∞—é –æ–±—ä–µ–∫—Ç—ã –ø–æ —Å–ª–æ—é:', terrainLayer.name)
  
  const adjustResult = sceneApi.adjustInstancesForPerlinTerrain(terrainLayer.id)
  
  if (adjustResult.success) {
    console.log('‚úÖ –í—ã—Ä–æ–≤–Ω–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:', adjustResult.adjustedCount)
  } else {
    console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è:', adjustResult.error)
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
const newStats = sceneApi.getSceneStats()
console.log('\\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤:', newStats.total.instances)`,

    '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏': `// –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–æ–≤
console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...')

const testSizes = [
  { name: '–ú–∞–ª—ã–π', world: [50, 50], base: [16, 16], ops: 5 },
  { name: '–°—Ä–µ–¥–Ω–∏–π', world: [100, 100], base: [32, 32], ops: 15 },
  { name: '–ë–æ–ª—å—à–æ–π', world: [200, 200], base: [64, 64], ops: 30 }
]

for (const test of testSizes) {
  console.log('\\n–¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–∑–º–µ—Ä: ' + test.name + ' (' + test.world[0] + 'x' + test.world[1] + ')')
  
  const startTime = Date.now()
  
  const spec = {
    world: { width: test.world[0], depth: test.world[1], edgeFade: 0.1 },
    base: { 
      seed: 555, 
      octaveCount: 3, 
      amplitude: 5, 
      persistence: 0.4, 
      width: test.base[0], 
      height: test.base[1] 
    },
    pool: {
      global: { maxOps: test.ops },
      recipes: [
        { kind: 'hill', count: test.ops, placement: { type: 'uniform' }, radius: [5, 12], intensity: [2, 5] }
      ]
    },
    seed: 555
  }
  
  try {
    const result = await sceneApi.createProceduralLayer(spec, { 
      name: '–¢–µ—Å—Ç ' + test.name.toLowerCase(), 
      visible: true 
    })
    
    const duration = Date.now() - startTime
    
    if (result.success) {
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞ ' + duration + '–º—Å (ID: ' + result.layerId + ')')
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞: ' + result.error)
    }
  } catch (error) {
    const duration = Date.now() - startTime
    console.log('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞ ' + duration + '–º—Å: ' + error.message)
  }
}

console.log('\\n–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!')`
  }

  return {
    '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç': quickStart,
    '–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è': readySolutions,
    'Fit‚Äë—Ö–µ–ª–ø–µ—Ä—ã': fitHelpers,
    '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã': specialLandscapes,
    '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã': advancedExamples,
    '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã': utilities
  }
}

/**
 * –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getTerrainTemplateGroups()
 */
export const getProceduralTerrainTemplates = () => {
  const groups = getTerrainTemplateGroups()
  const flattened: Record<string, string> = {}
  
  Object.entries(groups).forEach(([groupName, templates]) => {
    Object.entries(templates).forEach(([templateName, code]) => {
      flattened[`${groupName}: ${templateName}`] = code
    })
  })
  
  return flattened
}
