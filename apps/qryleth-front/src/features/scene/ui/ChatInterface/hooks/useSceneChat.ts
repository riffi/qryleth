import { useCallback, useEffect, useRef, useState } from 'react'
import { useChat } from '@/shared/entities/chat'
import type { ChatMessage, ChatConfig } from '@/shared/entities/chat'
import { createLangChainChatService, LangChainChatService } from '@/shared/lib/langchain'
import { getActiveConnection, upsertConnection } from '@/shared/lib/openAISettings'
import type { OpenAISettingsConnection } from '@/shared/lib/openAISettings'
import { createAddNewObjectTool } from '@/features/scene/lib/ai/tools'
import type { GfxObjectWithTransform } from '@/entities'
import { nanoid } from 'nanoid'

interface UseSceneChatOptions {
  onObjectAdded?: (object: GfxObjectWithTransform, toolName: string) => void
  debugMode?: boolean
}

interface UseSceneChatReturn {
  messages: ChatMessage[]
  isLoading: boolean
  sendMessage: (content: string) => Promise<void>
  addMessage: (message: ChatMessage) => void
  clearMessages: () => void
  connection: OpenAISettingsConnection | null
  updateModel: (model: string) => Promise<void>
  debugChatService: LangChainChatService | null
}

export const useSceneChat = (options: UseSceneChatOptions = {}): UseSceneChatReturn => {
  const { onObjectAdded, debugMode = true } = options
  const sceneChatServiceRef = useRef<LangChainChatService | null>(null)
  const debugChatServiceRef = useRef<LangChainChatService | null>(null)
  const connectionRef = useRef<OpenAISettingsConnection | null>(null)
  const mainServiceInitializedRef = useRef(false)
  const debugServiceInitializedRef = useRef(false)
  const [isLoading, setIsLoading] = useState(false)

  // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è scene editor
  const SCENE_SYSTEM_PROMPT = 'You are a helpful assistant that can use tools to interact with a 3D scene. ' +
    'When user wants to add new object to scene, first search existing objects in a library, if not found - create it. ' +
    'When creating primitives always generate meaningful Russian names.'

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è scene
  const chatConfig: ChatConfig = {
    feature: 'scene',
    tools: [], // Tools —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ LangChain —Å–µ—Ä–≤–∏—Å
    systemPrompt: SCENE_SYSTEM_PROMPT,
    debugMode
  }

  const baseChat = useChat({
    config: chatConfig,
    generateMessageId: () => nanoid()
  })

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ LangChain —Å–µ—Ä–≤–∏—Å –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏.
   * –ü–æ–∫–∞ –∞–≥–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏.
   */
  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim() || isLoading) return

    const userMessage: ChatMessage = {
      id: nanoid(),
      role: 'user',
      content: content.trim(),
      timestamp: new Date()
    }

    baseChat.addMessage(userMessage)
    setIsLoading(true)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º LangChain –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      if (!sceneChatServiceRef.current) {
        throw new Error('Scene chat service not initialized')
      }
      const langChainResponse = await sceneChatServiceRef.current.chat([...baseChat.messages, userMessage])

      const assistantMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: langChainResponse.message,
        timestamp: new Date()
      }
      baseChat.addMessage(assistantMessage)

    } catch (error) {
      console.error('Scene chat error:', error)
      const errorMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        timestamp: new Date()
      }
      baseChat.addMessage(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }, [baseChat, isLoading])

  // Scene-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ tool calls
  const handleToolCallback = useCallback((toolName: string, result: unknown) => {
    const res = result as { success?: boolean; object?: GfxObjectWithTransform }
    
    if (toolName === 'add_new_object' || toolName === 'add_object_from_library') {
      if (res.success && res.object) {
        // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback
        onObjectAdded?.(res.object, toolName)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        const icon = toolName === 'add_new_object' ? '‚úÖ' : 'üìò'
        const successMessage: ChatMessage = {
          id: nanoid(),
          role: 'assistant',
          content: `${icon} ${toolName === 'add_new_object' ? '–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç' : '–û–±—ä–µ–∫—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'} "${res.object.name}" –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É.`,
          timestamp: new Date()
        }
        baseChat.addMessage(successMessage)
      }
    }
  }, [onObjectAdded, baseChat.addMessage])

  const handleToolCallbackRef = useRef(handleToolCallback)

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ callback'–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–æ–º LangChain
  useEffect(() => {
    handleToolCallbackRef.current = handleToolCallback
    if (sceneChatServiceRef.current) {
      sceneChatServiceRef.current.setToolCallback(handleToolCallback)
    }
  }, [handleToolCallback])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å –∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å
  const updateModel = useCallback(async (model: string) => {
    if (!connectionRef.current) return
    
    const updated = { ...connectionRef.current, model }
    await upsertConnection(updated)
    connectionRef.current = updated

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LangChain —Å–µ—Ä–≤–∏—Å —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
    try {
      if (sceneChatServiceRef.current) {
        await sceneChatServiceRef.current.updateConnection()
        console.log('Scene LangChain —Å–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é:', model)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Scene LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏
      const errorMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: `‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        timestamp: new Date()
      }
      baseChat.addMessage(errorMessage)
    }
  }, [baseChat.addMessage])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ LangChain —Å–µ—Ä–≤–∏—Å–∞
  useEffect(() => {
    const initializeMainService = async () => {
      if (mainServiceInitializedRef.current) return
      mainServiceInitializedRef.current = true
      
      const activeConnection = await getActiveConnection()
      connectionRef.current = activeConnection

      try {
        // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è scene editor
        sceneChatServiceRef.current = createLangChainChatService(SCENE_SYSTEM_PROMPT)
        await sceneChatServiceRef.current.initialize()
        sceneChatServiceRef.current.setToolCallback(handleToolCallbackRef.current)
        console.log('Scene LangChain —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:', sceneChatServiceRef.current.getRegisteredTools())
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Scene LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)

        const errorMessage: ChatMessage = {
          id: nanoid(),
          role: 'assistant',
          content: `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Scene —á–∞—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          timestamp: new Date()
        }
        baseChat.addMessage(errorMessage)
      }
    }

    initializeMainService()
  }, [baseChat.addMessage])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
  useEffect(() => {
    if (!debugMode) {
      debugChatServiceRef.current = null
      debugServiceInitializedRef.current = false
      return
    }

    const initializeDebugService = async () => {
      if (debugServiceInitializedRef.current) return
      debugServiceInitializedRef.current = true

      try {
        const debugService = new LangChainChatService(
          '–°—Ä–∞–∑—É –∂–µ –≤—ã–ø–æ–ª–Ω–∏ tool –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ —É—Ç–æ—á–Ω—è—è –¥–µ—Ç–∞–ª–∏'
        )
        await debugService.initialize()
        debugService.clearTools()
        debugService.registerDynamicTool(createAddNewObjectTool())
        debugChatServiceRef.current = debugService
        console.log('Debug LangChain —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:', debugService.getRegisteredTools())
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)
      }
    }

    initializeDebugService()
  }, [debugMode])

  return {
    ...baseChat,
    isLoading,
    sendMessage,
    connection: connectionRef.current,
    updateModel,
    debugChatService: debugChatServiceRef.current
  }
}
