import React, { useEffect, useMemo, useRef, useState } from 'react'
import * as THREE from 'three'
import type { SceneLayer } from '@/entities/scene/types.ts'
import { useSceneStore } from '@/features/scene/model/sceneStore.ts'
import { DEFAULT_LANDSCAPE_COLOR } from '@/features/scene/constants.ts'
import { GfxLayerType, GfxLayerShape } from '@/entities/layer'
import type { GfxTerrainConfig } from '@/entities/terrain'
import { createGfxHeightSampler } from '@/features/scene/lib/terrain/GfxHeightSampler.ts'
import { buildGfxTerrainGeometry } from '@/features/scene/lib/terrain/GeometryBuilder.ts'

export interface LandscapeLayerProps {
  layer: SceneLayer
}


/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–≥–æ —Å–ª–æ—è.
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–π —Å—Ü–µ–Ω—ã –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É GfxHeightSampler (legacy —Ä–µ–∂–∏–º —É–¥–∞–ª—ë–Ω).
 * –¶–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ `color` —Å–ª–æ—è, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ñ–æ—Ä–º—ã.
 */
export const LandscapeLayer: React.FC<LandscapeLayerProps> = ({ layer }) => {
  const updateLayer = useSceneStore(state => state.updateLayer)
  const startTerrainApplying = useSceneStore(state => state.startTerrainApplying)
  const finishTerrainApplying = useSceneStore(state => state.finishTerrainApplying)
  const DEBUG = (import.meta as any)?.env?.MODE !== 'production'

  // –í–µ—Ä—Å–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏: —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ sampler —Å–æ–æ–±—â–∞–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  const [geometryVersion, setGeometryVersion] = useState(0)

  // –°–æ–∑–¥–∞—ë–º sampler –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–≤–µ—Å–∏—Ç—å onHeightmapLoaded –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ
  const sampler = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain && layer.terrain) {
      if (DEBUG) console.log('üóª LandscapeLayer: Using terrain config for layer', layer.id, layer.terrain)
      return createGfxHeightSampler(layer.terrain)
    }
    return null
  }, [layer.id, layer.shape, layer.terrain])

  // –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤—ã—Å–æ—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–æ–º –±–µ–∑ —Ç–∞–π–º–µ—Ä–æ–≤
  useEffect(() => {
    if (!sampler || layer.shape !== GfxLayerShape.Terrain || !layer.terrain) return

    // –ü—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è heightmap-–∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –µ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ
    const needsWait = layer.terrain.source.kind === 'heightmap' && !sampler.isReady?.()
    if (needsWait) startTerrainApplying()

    let cancelled = false
    ;(async () => {
      try {
        await sampler.ready?.()
        if (cancelled) return
        if (DEBUG) console.log('üóª Terrain sampler ready ‚Äî rebuilding geometry')
        setGeometryVersion(v => v + 1)
      } finally {
        if (needsWait) finishTerrainApplying()
      }
    })()

    return () => { cancelled = true }
  }, [sampler, layer.shape, layer.terrain, startTerrainApplying, finishTerrainApplying])

  const geometry = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain) {
      // –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º GfxHeightSampler –µ—Å–ª–∏ –µ—Å—Ç—å terrain –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      if (layer.terrain && sampler) {
        const geometry = buildGfxTerrainGeometry(layer.terrain, sampler)
        if (DEBUG) console.log('üóª LandscapeLayer: Generated geometry with vertices:', geometry.attributes.position.count)
        return geometry
      }
      // –ù–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      return new THREE.PlaneGeometry(layer.width || 1, layer.height || 1)
    } else {
      return new THREE.PlaneGeometry(layer.width || 1, layer.height || 1)
    }
  }, [layer.width, layer.height, layer.shape, layer.terrain, layer.id, sampler, geometryVersion])

  // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      geometry?.dispose()
    }
  }, [geometry])

  const materialColor = useMemo(() => {
    if (layer.color) {
      return new THREE.Color(layer.color)
    }
    if (layer.shape === GfxLayerShape.Terrain) {
      return new THREE.Color('#4a7c59')
    } else {
      return new THREE.Color(DEFAULT_LANDSCAPE_COLOR)
    }
  }, [layer.shape, layer.color])

  const rotation = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain) {
      return [0, 0, 0] // Terrain geometries are already horizontal (rotated in buildGfxTerrainGeometry)
    } else {
      return [-Math.PI / 2, 0, 0] // Rotate plane to be horizontal
    }
  }, [layer.shape])

  return (
    <mesh
      geometry={geometry}
      visible={layer.visible}
      rotation={rotation}
      position={[0, 0.1, 0]} // Slightly above grid for better visibility
      receiveShadow
      userData={{
        generated: true,
        layerId: layer.id,
        layerType: GfxLayerType.Landscape
      }}
    >
      <meshLambertMaterial
        color={materialColor}
        side={THREE.DoubleSide}
        wireframe={false}
        transparent={false}
        opacity={1.0}
      />
    </mesh>
  )
}
