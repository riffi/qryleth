import React, { useEffect, useMemo, useState } from 'react'
import * as THREE from 'three'
import type { SceneLayer } from '@/entities/scene/types.ts'
import { useSceneStore } from '@/features/scene/model/sceneStore.ts'
import { DEFAULT_LANDSCAPE_COLOR } from '@/features/scene/constants.ts'
import { GfxLayerType, GfxLayerShape } from '@/entities/layer'
import { createGfxHeightSampler } from '@/features/scene/lib/terrain/GfxHeightSampler.ts'
import { buildGfxTerrainGeometry } from '@/features/scene/lib/terrain/GeometryBuilder.ts'
import { MultiColorProcessor} from '@/features/scene/lib/terrain/MultiColorProcessor.ts'

export interface LandscapeLayerProps {
  layer: SceneLayer
}

/**
 * –†–µ–Ω–¥–µ—Ä –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–≥–æ —Å–ª–æ—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
 *  - –ø–æ–∫—Ä–∞—Å–∫–∏ –ø–æ –≤–µ—Ä—à–∏–Ω–∞–º (–∫–∞–∫ –±—ã–ª–æ)
 *  - –ø–æ–∫—Ä–∞—Å–∫–∏ –ø–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞–º (–Ω–æ–≤–æ–µ), –µ—Å–ª–∏ layer.multiColor.mode === 'triangle'
 */
export const LandscapeLayer: React.FC<LandscapeLayerProps> = ({ layer }) => {
  const startTerrainApplying = useSceneStore(state => state.startTerrainApplying)
  const finishTerrainApplying = useSceneStore(state => state.finishTerrainApplying)
  const DEBUG = (import.meta as any)?.env?.MODE !== 'production'

  const [geometryVersion, setGeometryVersion] = useState(0)

  // sampler
  const sampler = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain && layer.terrain) {
      if (DEBUG) console.log('üóª LandscapeLayer: Using terrain config for layer', layer.id, layer.terrain)
      return createGfxHeightSampler(layer.terrain)
    }
    return null
  }, [layer.id, layer.shape, layer.terrain])

  // –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ heightmap (–µ—Å–ª–∏ –µ—Å—Ç—å)
  useEffect(() => {
    if (!sampler || layer.shape !== GfxLayerShape.Terrain || !layer.terrain) return

    const needsWait = layer.terrain.source.kind === 'heightmap' && !sampler.isReady?.()
    if (needsWait) startTerrainApplying()

    let cancelled = false
    ;(async () => {
      try {
        await sampler.ready?.()
        if (cancelled) return
        if (DEBUG) console.log('üóª Terrain sampler ready ‚Äî rebuilding geometry')
        setGeometryVersion(v => v + 1)
      } finally {
        if (needsWait) finishTerrainApplying()
      }
    })()

    return () => { cancelled = true }
  }, [sampler, layer.shape, layer.terrain, startTerrainApplying, finishTerrainApplying])

  // –±–∞–∑–æ–≤–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è (–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç –±–∏–ª–¥–µ—Ä)
  const baseGeometry = useMemo(() => {
    const w = layer.width || 1
    const d = (layer as any).depth ?? (layer as any).height ?? 1

    let geom: THREE.BufferGeometry
    if (layer.shape === GfxLayerShape.Terrain) {
      if (layer.terrain && sampler) {
        geom = buildGfxTerrainGeometry(layer.terrain, sampler)
        if (DEBUG) console.log('üóª LandscapeLayer: Generated geometry with vertices:', geom.attributes.position.count)
      } else {
        geom = new THREE.PlaneGeometry(w, d)
      }
    } else {
      geom = new THREE.PlaneGeometry(w, d)
      // –ø–ª–æ—Å–∫–æ—Å—Ç—å –ø–æ–≤–µ—Ä–Ω—ë–º –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ rotation
    }
    return geom
  }, [layer.width, (layer as any).depth, (layer as any).height, layer.shape, layer.terrain, layer.id, sampler, geometryVersion])

  // –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏
  useEffect(() => () => { baseGeometry?.dispose() }, [baseGeometry])

  // –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–Ω–æ–≥–æ—Ü–≤–µ—Ç–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏
  const multiColorProcessor = useMemo(() => {
    if (layer.multiColor && sampler) {
      if (DEBUG) console.log('üé® LandscapeLayer: Creating MultiColorProcessor for layer', layer.id)
      // –ø—Ä–æ–±—Ä–æ—Å–∏–º –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –µ—Å—Ç—å ‚Äî –æ–Ω —Å–æ–≤–º–µ—Å—Ç–∏–º (mode/palette/slopeBoost)
      return new MultiColorProcessor(layer.multiColor)
    }
    return null
  }, [layer.multiColor, sampler])

  // –∏—Ç–æ–≥–æ–≤–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è –ø–æ–¥ mesh:
  //  - –µ—Å–ª–∏ multiColor off -> –∏—Å–ø–æ–ª—å–∑—É–µ–º baseGeometry
  //  - –µ—Å–ª–∏ multiColor.mode === 'triangle' -> —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é face-geometry
  //  - –∏–Ω–∞—á–µ -> –∫—Ä–∞—Å–∏–º –≤–µ—Ä—à–∏–Ω—ã –Ω–∞ –º–µ—Å—Ç–µ
  const finalGeometry = useMemo(() => {
    if (!multiColorProcessor || !sampler || !baseGeometry) return baseGeometry

    const mode = (layer.multiColor as any)?.mode as ('vertex' | 'triangle' | undefined)

    if (mode === 'triangle') {
      const faceGeom = multiColorProcessor.generateFaceColoredGeometry(sampler, baseGeometry)
      if (DEBUG) console.log('üé® LandscapeLayer: built face-colored geometry, vertices:', faceGeom.attributes.position.count)
      return faceGeom
    } else {
      const vertexColors = multiColorProcessor.generateVertexColors(sampler, baseGeometry)
      baseGeometry.setAttribute('color', new THREE.BufferAttribute(vertexColors, 4)) // RGBA –≤–º–µ—Å—Ç–æ RGB
      ;(baseGeometry.attributes.color as THREE.BufferAttribute).needsUpdate = true
      return baseGeometry
    }
  }, [multiColorProcessor, sampler, baseGeometry, layer.multiColor, DEBUG])

  // –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ face-–≥–µ–æ–º–µ—Ç—Ä–∏–∏ (–µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –Ω–æ–≤—É—é)
  useEffect(() => {
    // –µ—Å–ª–∏ finalGeometry !== baseGeometry ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, –µ–≥–æ –Ω—É–∂–Ω–æ —á–∏—Å—Ç–∏—Ç—å
    if (finalGeometry && finalGeometry !== baseGeometry) {
      return () => { finalGeometry.dispose() }
    }
  }, [finalGeometry, baseGeometry])

  const materialColor = useMemo(() => {
    if (layer.multiColor) return new THREE.Color('#ffffff') // —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ vertex colors
    if (layer.color) return new THREE.Color(layer.color)
    if (layer.shape === GfxLayerShape.Terrain) return new THREE.Color('#4a7c59')
    return new THREE.Color(DEFAULT_LANDSCAPE_COLOR)
  }, [layer.shape, layer.color, layer.multiColor])

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –≤ –ø–∞–ª–∏—Ç—Ä–µ
  const hasTransparency = useMemo(() => {
    if (!layer.multiColor?.palette) return false
    return layer.multiColor.palette.some(stop => (stop.alpha ?? 1.0) < 1.0)
  }, [layer.multiColor?.palette])

  const rotation = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain) return [0, 0, 0] as const
    return [-Math.PI / 2, 0, 0] as const
  }, [layer.shape])

  const useVertexColors = Boolean(layer.multiColor)

  return (
      <mesh
          geometry={finalGeometry}
          visible={layer.visible}
          rotation={rotation}
          position={[0, 0.1, 0]}
          receiveShadow
          userData={{
            generated: true,
            layerId: layer.id,
            layerType: GfxLayerType.Landscape
          }}
      >
        <meshLambertMaterial
            color={materialColor}
            side={THREE.DoubleSide}
            wireframe={false}
            transparent={hasTransparency || layer.multiColor} // –≤–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ alpha –≤ –ø–∞–ª–∏—Ç—Ä–µ
            opacity={1.0}
            vertexColors={useVertexColors}
        />
      </mesh>
  )
}
