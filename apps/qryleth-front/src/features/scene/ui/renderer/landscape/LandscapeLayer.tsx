import React, { useEffect, useMemo, useRef, useState } from 'react'
import * as THREE from 'three'
import type { SceneLayer } from '@/entities/scene/types.ts'
import { useSceneStore } from '@/features/scene/model/sceneStore.ts'
import { DEFAULT_LANDSCAPE_COLOR } from '@/features/scene/constants.ts'
import { GfxLayerType, GfxLayerShape } from '@/entities/layer'
import type { GfxTerrainConfig } from '@/entities/terrain'
import { createGfxHeightSampler } from '@/features/scene/lib/terrain/GfxHeightSampler.ts'
import { buildGfxTerrainGeometry } from '@/features/scene/lib/terrain/GeometryBuilder.ts'

export interface LandscapeLayerProps {
  layer: SceneLayer
}


/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–≥–æ —Å–ª–æ—è.
 * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–π —Å—Ü–µ–Ω—ã –∏ —Å–æ–∑–¥–∞—ë—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É GfxHeightSampler (legacy —Ä–µ–∂–∏–º —É–¥–∞–ª—ë–Ω).
 * –¶–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ `color` —Å–ª–æ—è, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ñ–æ—Ä–º—ã.
 */
export const LandscapeLayer: React.FC<LandscapeLayerProps> = ({ layer }) => {
  const updateLayer = useSceneStore(state => state.updateLayer)
  const startTerrainApplying = useSceneStore(state => state.startTerrainApplying)
  const finishTerrainApplying = useSceneStore(state => state.finishTerrainApplying)
  const DEBUG = (import.meta as any)?.env?.MODE !== 'production'

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ heightmap
  const [heightmapLoaded, setHeightmapLoaded] = useState(false)

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º assetId, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
  const startedForAssetRef = useRef<string | null>(null)

  // –°–æ–∑–¥–∞—ë–º sampler –æ—Ç–¥–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞–≤–µ—Å–∏—Ç—å onHeightmapLoaded –≤ —ç—Ñ—Ñ–µ–∫—Ç–µ
  const sampler = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain && layer.terrain) {
      if (DEBUG) console.log('üóª LandscapeLayer: Using terrain config for layer', layer.id, layer.terrain)
      return createGfxHeightSampler(layer.terrain)
    }
    return null
  }, [layer.id, layer.shape, layer.terrain])

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö heightmap –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ª–æ–∞–¥–µ—Ä–æ–º
  useEffect(() => {
    if (!sampler || layer.shape !== GfxLayerShape.Terrain || !layer.terrain) return
    if (layer.terrain.source.kind !== 'heightmap') return

    const assetId = layer.terrain.source.params.assetId

    // –°—Ç–∞—Ä—Ç—É–µ–º –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ assetId
    if (startedForAssetRef.current !== assetId) {
      startedForAssetRef.current = assetId
      startTerrainApplying()
    }

    // –¢–∞–π–º–∞—É—Ç-–∑–∞—â–∏—Ç–∞: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø—Ä–∏–¥—ë—Ç
    const safetyTimer = setTimeout(() => {
      if (DEBUG) console.warn('‚è≥ Heightmap apply timeout reached ‚Äî closing preloader safeguard')
      finishTerrainApplying()
    }, 10000)

    // –§–ª–∞–≥, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –µ–¥–∏–Ω–æ–∂–¥—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ assetId
    let handled = false

    sampler.onHeightmapLoaded?.(() => {
      if (handled) return
      handled = true
      if (DEBUG) console.log('üóª Heightmap data loaded, triggering geometry rebuild')
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
      setHeightmapLoaded(prev => !prev)
      // –í–∞–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –±–æ–ª—å—à–µ –Ω–µ –¥–µ—Ä–≥–∞–µ–º updateLayer, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å sampler
      // –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–Ω–æ–≤–æ. –õ–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —á–µ—Ä–µ–∑ state –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
      finishTerrainApplying()
      clearTimeout(safetyTimer)
    })

    return () => {
      clearTimeout(safetyTimer)
    }
  }, [sampler, layer.shape, layer.terrain, updateLayer, startTerrainApplying, finishTerrainApplying])

  const geometry = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain) {
      // –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º GfxHeightSampler –µ—Å–ª–∏ –µ—Å—Ç—å terrain –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      if (layer.terrain && sampler) {
        const geometry = buildGfxTerrainGeometry(layer.terrain, sampler)
        if (DEBUG) console.log('üóª LandscapeLayer: Generated geometry with vertices:', geometry.attributes.position.count)
        return geometry
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π terrain –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ª–æ–µ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
      const newTerrainConfig: GfxTerrainConfig = {
        worldWidth: layer.width || 1,
        worldHeight: layer.height || 1,
        edgeFade: 0.15,
        source: {
          kind: 'perlin',
          params: {
            seed: 1234,
            octaveCount: 4,
            amplitude: 0.1,
            persistence: 0.5,
            width: (layer.width && layer.width > 200) ? 200 : (layer.width || 1),
            height: (layer.height && layer.height > 200) ? 200 : (layer.height || 1)
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é terrain –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ store
      updateLayer(layer.id, { terrain: newTerrainConfig })
      
      // –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
      const newSampler = createGfxHeightSampler(newTerrainConfig)
      return buildGfxTerrainGeometry(newTerrainConfig, newSampler)
    } else {
      return new THREE.PlaneGeometry(layer.width || 1, layer.height || 1)
    }
  }, [layer.width, layer.height, layer.shape, layer.terrain, layer.id, sampler, updateLayer, heightmapLoaded])

  const materialColor = useMemo(() => {
    if (layer.color) {
      return new THREE.Color(layer.color)
    }
    if (layer.shape === GfxLayerShape.Terrain) {
      return new THREE.Color('#4a7c59')
    } else {
      return new THREE.Color(DEFAULT_LANDSCAPE_COLOR)
    }
  }, [layer.shape, layer.color])

  const rotation = useMemo(() => {
    if (layer.shape === GfxLayerShape.Terrain) {
      return [0, 0, 0] // Terrain geometries are already horizontal (rotated in buildGfxTerrainGeometry)
    } else {
      return [-Math.PI / 2, 0, 0] // Rotate plane to be horizontal
    }
  }, [layer.shape])

  return (
    <mesh
      // –ö–ª—é—á –∑–∞–≤–∏—Å–∏—Ç –æ—Ç heightmapLoaded –∏ —Ü–≤–µ—Ç–∞ —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å Mesh –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      key={`${layer.id}-${heightmapLoaded ? 'hm1' : 'hm0'}-${layer.color || 'default'}`}
      geometry={geometry}
      visible={layer.visible}
      rotation={rotation}
      position={[0, 0.1, 0]} // Slightly above grid for better visibility
      receiveShadow
      userData={{
        generated: true,
        layerId: layer.id,
        layerType: GfxLayerType.Landscape
      }}
    >
      <meshLambertMaterial
        color={materialColor}
        side={THREE.DoubleSide}
        wireframe={false}
        transparent={false}
        opacity={1.0}
      />
    </mesh>
  )
}
