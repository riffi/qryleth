/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–µ—Ä—Ä–µ–π–Ω—É
 * –£–±–∏—Ä–∞—é—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */

import { useSceneStore } from '../../model/sceneStore'
import { SceneAPI } from '../sceneAPI'
import { notifications } from '@mantine/notifications'
import type { SceneLayer } from '@/entities/scene/types'

const DEBUG = (import.meta as any)?.env?.MODE !== 'production'

/**
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ç–µ—Ä—Ä–µ–π–Ω—É
 */
export interface TerrainAdjustmentOptions {
  /** ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—è —Ç–µ—Ä—Ä–µ–π–Ω–∞ */
  layerId: string
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è */
  maxAttempts?: number
  /** –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º—Å */
  retryDelay?: number
  /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ */
  showSuccessNotification?: boolean
  /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */
  showErrorNotification?: boolean
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
export interface TerrainAdjustmentResult {
  success: boolean
  adjustedCount?: number
  error?: string
  terrainType?: string
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ç–µ—Ä—Ä–µ–π–Ω—É.
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ç–µ—Ä—Ä–µ–π–Ω–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç retry-–ª–æ–≥–∏–∫—É –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö heightmap.
 * 
 * @param options - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
 * @returns Promise —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
 */
export async function adjustObjectsForCreatedTerrain(
  options: TerrainAdjustmentOptions
): Promise<TerrainAdjustmentResult> {
  const {
    layerId,
    maxAttempts = 15,
    retryDelay = 200,
    showSuccessNotification = true,
    showErrorNotification = true
  } = options

  if (DEBUG) console.log('üóª Starting terrain adjustment for layer:', layerId)

  const attemptAdjustment = async (attempt = 1): Promise<TerrainAdjustmentResult> => {
    try {
      const currentLayer = useSceneStore.getState().layers.find(l => l.id === layerId)
      
      if (DEBUG) console.log(`üóª Adjustment attempt ${attempt}/${maxAttempts} for layer:`, currentLayer?.terrain?.source.kind || 'legacy')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ terrain –¥–∞–Ω–Ω—ã—Ö (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞) –∏–ª–∏ noiseData (legacy)
      const hasTerrainData = currentLayer?.terrain || currentLayer?.noiseData
      
      if (hasTerrainData) {
        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–µ—Ä—Ä–µ–π–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
          const isHeightmapTerrain = currentLayer?.terrain?.source.kind === 'heightmap'
          
          let result
          if (isHeightmapTerrain) {
            // –î–ª—è heightmap –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            result = await SceneAPI.adjustInstancesForTerrainAsync(layerId)
          } else {
            // –î–ª—è Perlin Noise –∏ legacy –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            result = SceneAPI.adjustInstancesForPerlinTerrain(layerId)
          }
          
          if (result.success && result.adjustedCount && result.adjustedCount > 0) {
            const terrainType = isHeightmapTerrain ? 'heightmap' : 'Perlin Noise'
            
            if (DEBUG) console.log('üóª Successfully adjusted', result.adjustedCount, 'instances for', terrainType)
            
            if (showSuccessNotification) {
              notifications.show({
                title: '–û–±—ä–µ–∫—Ç—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã',
                message: `–ü–æ–∑–∏—Ü–∏–∏ ${result.adjustedCount} –æ–±—ä–µ–∫—Ç–æ–≤ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ —Ä–µ–ª—å–µ—Ñ ${terrainType}`,
                color: 'green'
              })
            }
            
            return {
              success: true,
              adjustedCount: result.adjustedCount,
              terrainType
            }
          } else if (result.success) {
            if (DEBUG) console.log('üóª Adjustment completed but no instances were adjusted')
            return {
              success: true,
              adjustedCount: 0,
              terrainType: isHeightmapTerrain ? 'heightmap' : 'Perlin Noise'
            }
          } else {
            if (DEBUG) console.log('üóª Adjustment failed:', result.error)
            throw new Error(result.error || 'Adjustment failed')
          }
        } catch (error) {
          console.error('Error during terrain adjustment:', error)
          
          if (attempt < maxAttempts) {
            if (DEBUG) console.log(`üóª Retrying adjustment in ${retryDelay * attempt}ms...`)
            await new Promise(resolve => setTimeout(resolve, retryDelay * attempt))
            return attemptAdjustment(attempt + 1)
          } else {
            console.warn('Failed to adjust objects: max attempts reached')
            
            if (showErrorNotification) {
              notifications.show({
                title: '–û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏',
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–¥ —Ä–µ–ª—å–µ—Ñ',
                color: 'red'
              })
            }
            
            return {
              success: false,
              error: 'Max attempts reached'
            }
          }
        }
      } else if (attempt < maxAttempts) {
        if (DEBUG) console.log(`üóª Terrain data not ready, retrying in ${retryDelay * attempt}ms...`)
        await new Promise(resolve => setTimeout(resolve, retryDelay * attempt))
        return attemptAdjustment(attempt + 1)
      } else {
        console.warn('Failed to adjust objects: terrain data not available after', maxAttempts, 'attempts')
        return {
          success: false,
          error: 'Terrain data not available'
        }
      }
    } catch (error) {
      console.error('Error in terrain adjustment attempt:', error)
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }
    }
  }

  return attemptAdjustment()
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ—è)
 * @param options - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
 * @param delay - –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
 */
export function scheduleTerrainAdjustment(
  options: TerrainAdjustmentOptions,
  delay: number = 100
): void {
  setTimeout(() => {
    adjustObjectsForCreatedTerrain(options).catch(error => {
      console.error('Error in scheduled terrain adjustment:', error)
    })
  }, delay)
}