/**
 * –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è GfxHeightSampler
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { createGfxHeightSampler } from './GfxHeightSampler';
import type { GfxTerrainConfig } from '@/entities/terrain';

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 * @param condition - —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param message - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
function assert(condition: boolean, message: string): void {
  if (!condition) {
    throw new Error(`Test failed: ${message}`);
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–≥–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —á–∏—Å–µ–ª
 * @param actual - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param expected - –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param tolerance - –¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
 */
function assertApproxEqual(actual: number, expected: number, tolerance: number = 0.001): void {
  const diff = Math.abs(actual - expected);
  if (diff > tolerance) {
    throw new Error(`Expected ${actual} to be approximately ${expected} (tolerance: ${tolerance}), but difference was ${diff}`);
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GfxHeightSampler —Å Perlin –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
 */
function testPerlinSource(): void {
  console.log('üß™ Testing Perlin source...');

  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'perlin',
      params: {
        seed: 12345,
        octaveCount: 4,
        amplitude: 0.1,
        persistence: 0.5,
        width: 32,
        height: 32
      }
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—ã—Å–æ—Ç—É
  const height = sampler.getHeight(0, 0);
  assert(typeof height === 'number', 'Height should be a number');
  assert(isFinite(height), 'Height should be finite');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –≤—ã—Å–æ—Ç—É
  const height2 = sampler.getHeight(0, 0);
  assert(height === height2, 'Same coordinates should return same height');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏
  const normal = sampler.getNormal(0, 0);
  assert(Array.isArray(normal), 'Normal should be an array');
  assert(normal.length === 3, 'Normal should have 3 components');
  assert(normal.every(n => typeof n === 'number' && isFinite(n)), 'All normal components should be finite numbers');
  
  // –ù–æ—Ä–º–∞–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (–¥–ª–∏–Ω–∞ ‚âà 1)
  const normalLength = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);
  assertApproxEqual(normalLength, 1, 0.01);
  
  console.log('‚úÖ Perlin source test passed');
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GfxHeightSampler —Å legacy –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
 */
function testLegacySource(): void {
  console.log('üß™ Testing Legacy source...');

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = new Float32Array([0, 1, 2, 3]);
  
  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'legacy',
      data: testData,
      width: 2,
      height: 2
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—ã—Å–æ—Ç—É
  const height = sampler.getHeight(0, 0);
  assert(typeof height === 'number', 'Height should be a number');
  assert(isFinite(height), 'Height should be finite');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏
  const normal = sampler.getNormal(0, 0);
  assert(Array.isArray(normal), 'Normal should be an array');
  assert(normal.length === 3, 'Normal should have 3 components');
  assert(normal.every(n => typeof n === 'number' && isFinite(n)), 'All normal components should be finite numbers');
  
  console.log('‚úÖ Legacy source test passed');
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ edgeFade
 */
function testEdgeFade(): void {
  console.log('üß™ Testing Edge fade...');

  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    edgeFade: 0.2, // 20% –æ–±–ª–∞—Å—Ç–∏ –æ—Ç –∫—Ä–∞—è –±—É–¥–µ—Ç –∑–∞—Ç—É—Ö–∞—Ç—å
    source: {
      kind: 'perlin',
      params: {
        seed: 12345,
        octaveCount: 4,
        amplitude: 0.1,
        persistence: 0.5,
        width: 32,
        height: 32
      }
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤ —Ü–µ–Ω—Ç—Ä–µ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ç—É—Ö—à–µ–π)
  const centerHeight = sampler.getHeight(0, 0);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –∫—Ä–∞—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ç—É—Ö—à–µ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π)
  const edgeHeight = sampler.getHeight(-5, 0); // –Ω–∞ –ª–µ–≤–æ–º –∫—Ä–∞—é
  
  // –ù–∞ –∫—Ä–∞—é –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π
  assert(edgeHeight <= centerHeight, 'Edge height should be <= center height with edgeFade');
  
  console.log('‚úÖ Edge fade test passed');
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ heightmap –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
 */
function testHeightmapSource(): void {
  console.log('üß™ Testing Heightmap source (stub)...');

  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'heightmap',
      params: {
        assetId: 'test-asset-id',
        imgWidth: 256,
        imgHeight: 256,
        min: 0,
        max: 10
      }
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 0
  const height = sampler.getHeight(0, 0);
  assert(height === 0, 'Heightmap stub should return 0');
  
  // –ù–æ—Ä–º–∞–ª—å –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–≤–µ—Ä—Ö
  const normal = sampler.getNormal(0, 0);
  assertApproxEqual(normal[0], 0);
  assertApproxEqual(normal[1], 1);  
  assertApproxEqual(normal[2], 0);
  
  console.log('‚úÖ Heightmap source test passed (stub implementation)');
}

/**
 * –¢–µ—Å—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ seed-friendly –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function testSeedDeterminism(): void {
  console.log('üß™ Testing Seed determinism...');

  const createConfig = (seed: number): GfxTerrainConfig => ({
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'perlin',
      params: {
        seed: seed,
        octaveCount: 4,
        amplitude: 0.1,
        persistence: 0.5,
        width: 32,
        height: 32
      }
    }
  });

  const sampler1 = createGfxHeightSampler(createConfig(12345));
  const sampler2 = createGfxHeightSampler(createConfig(12345));
  const sampler3 = createGfxHeightSampler(createConfig(54321));
  
  // –°—ç–º–ø–ª–µ—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º seed –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const height1_1 = sampler1.getHeight(1, 2);
  const height1_2 = sampler2.getHeight(1, 2);
  assert(height1_1 === height1_2, 'Same seed should produce identical heights');
  
  // –°—ç–º–ø–ª–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º seed –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const height2 = sampler3.getHeight(1, 2);
  assert(height1_1 !== height2, 'Different seeds should produce different heights');
  
  console.log('‚úÖ Seed determinism test passed');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
export function runGfxHeightSamplerTests(): void {
  console.log('üöÄ Running GfxHeightSampler tests...\n');

  try {
    testPerlinSource();
    testLegacySource();
    testEdgeFade();
    testHeightmapSource();
    testSeedDeterminism();
    
    console.log('\n‚úÖ All GfxHeightSampler tests passed!');
  } catch (error) {
    console.error('\n‚ùå Test failed:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (import.meta.env?.DEV) {
  // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
  // runGfxHeightSamplerTests();
}