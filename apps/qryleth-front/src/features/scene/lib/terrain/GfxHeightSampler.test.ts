/**
 * –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è GfxHeightSampler
 * –ü—Ä–æ–≤–µ—Ä—è—é—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import { createGfxHeightSampler } from './GfxHeightSampler';
import type { GfxTerrainConfig } from '@/entities/terrain';

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
 * @param condition - —É—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param message - —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
function assert(condition: boolean, message: string): void {
  if (!condition) {
    throw new Error(`Test failed: ${message}`);
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–≥–æ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ —á–∏—Å–µ–ª
 * @param actual - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param expected - –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 * @param tolerance - –¥–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
 */
function assertApproxEqual(actual: number, expected: number, tolerance: number = 0.001): void {
  const diff = Math.abs(actual - expected);
  if (diff > tolerance) {
    throw new Error(`Expected ${actual} to be approximately ${expected} (tolerance: ${tolerance}), but difference was ${diff}`);
  }
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GfxHeightSampler —Å Perlin –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
 */
function testPerlinSource(): void {
  console.log('üß™ Testing Perlin source...');

  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'perlin',
      params: {
        seed: 12345,
        octaveCount: 4,
        amplitude: 0.1,
        persistence: 0.5,
        width: 32,
        height: 32
      }
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—ã—Å–æ—Ç—É
  const height = sampler.getHeight(0, 0);
  assert(typeof height === 'number', 'Height should be a number');
  assert(isFinite(height), 'Height should be finite');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –≤—ã—Å–æ—Ç—É
  const height2 = sampler.getHeight(0, 0);
  assert(height === height2, 'Same coordinates should return same height');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏
  const normal = sampler.getNormal(0, 0);
  assert(Array.isArray(normal), 'Normal should be an array');
  assert(normal.length === 3, 'Normal should have 3 components');
  assert(normal.every(n => typeof n === 'number' && isFinite(n)), 'All normal components should be finite numbers');
  
  // –ù–æ—Ä–º–∞–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–∞ (–¥–ª–∏–Ω–∞ ‚âà 1)
  const normalLength = Math.sqrt(normal[0] * normal[0] + normal[1] * normal[1] + normal[2] * normal[2]);
  assertApproxEqual(normalLength, 1, 0.01);
  
  console.log('‚úÖ Perlin source test passed');
}

/**
 * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GfxHeightSampler —Å legacy –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
 */
function testLegacySource(): void {
  console.log('üß™ Testing Legacy source...');

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = new Float32Array([0, 1, 2, 3]);
  
  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'legacy',
      data: testData,
      width: 2,
      height: 2
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –≤—ã—Å–æ—Ç—É
  const height = sampler.getHeight(0, 0);
  assert(typeof height === 'number', 'Height should be a number');
  assert(isFinite(height), 'Height should be finite');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏
  const normal = sampler.getNormal(0, 0);
  assert(Array.isArray(normal), 'Normal should be an array');
  assert(normal.length === 3, 'Normal should have 3 components');
  assert(normal.every(n => typeof n === 'number' && isFinite(n)), 'All normal components should be finite numbers');
  
  console.log('‚úÖ Legacy source test passed');
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ edgeFade
 */
function testEdgeFade(): void {
  console.log('üß™ Testing Edge fade...');

  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    edgeFade: 0.2, // 20% –æ–±–ª–∞—Å—Ç–∏ –æ—Ç –∫—Ä–∞—è –±—É–¥–µ—Ç –∑–∞—Ç—É—Ö–∞—Ç—å
    source: {
      kind: 'perlin',
      params: {
        seed: 12345,
        octaveCount: 4,
        amplitude: 0.1,
        persistence: 0.5,
        width: 32,
        height: 32
      }
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –≤ —Ü–µ–Ω—Ç—Ä–µ (–Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ç—É—Ö—à–µ–π)
  const centerHeight = sampler.getHeight(0, 0);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ –∫—Ä–∞—é (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞—Ç—É—Ö—à–µ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π)
  const edgeHeight = sampler.getHeight(-5, 0); // –Ω–∞ –ª–µ–≤–æ–º –∫—Ä–∞—é
  
  // –ù–∞ –∫—Ä–∞—é –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π
  assert(edgeHeight <= centerHeight, 'Edge height should be <= center height with edgeFade');
  
  console.log('‚úÖ Edge fade test passed');
}

/**
 * –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ heightmap –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)
 */
function testHeightmapSource(): void {
  console.log('üß™ Testing Heightmap source (stub)...');

  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'heightmap',
      params: {
        assetId: 'test-asset-id',
        imgWidth: 256,
        imgHeight: 256,
        min: 0,
        max: 10
      }
    }
  };

  const sampler = createGfxHeightSampler(config);
  
  // –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å 0
  const height = sampler.getHeight(0, 0);
  assert(height === 0, 'Heightmap stub should return 0');
  
  // –ù–æ—Ä–º–∞–ª—å –¥–æ–ª–∂–Ω–∞ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–≤–µ—Ä—Ö
  const normal = sampler.getNormal(0, 0);
  assertApproxEqual(normal[0], 0);
  assertApproxEqual(normal[1], 1);  
  assertApproxEqual(normal[2], 0);
  
  console.log('‚úÖ Heightmap source test passed (stub implementation)');
}

/**
 * –¢–µ—Å—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ seed-friendly –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function testSeedDeterminism(): void {
  console.log('üß™ Testing Seed determinism...');

  const createConfig = (seed: number): GfxTerrainConfig => ({
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'perlin',
      params: {
        seed: seed,
        octaveCount: 4,
        amplitude: 0.1,
        persistence: 0.5,
        width: 32,
        height: 32
      }
    }
  });

  const sampler1 = createGfxHeightSampler(createConfig(12345));
  const sampler2 = createGfxHeightSampler(createConfig(12345));
  const sampler3 = createGfxHeightSampler(createConfig(54321));
  
  // –°—ç–º–ø–ª–µ—Ä—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º seed –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const height1_1 = sampler1.getHeight(1, 2);
  const height1_2 = sampler2.getHeight(1, 2);
  assert(height1_1 === height1_2, 'Same seed should produce identical heights');
  
  // –°—ç–º–ø–ª–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º seed –¥–æ–ª–∂–Ω—ã –¥–∞–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const height2 = sampler3.getHeight(1, 2);
  assert(height1_1 !== height2, 'Different seeds should produce different heights');
  
  console.log('‚úÖ Seed determinism test passed');
}

/**
 * –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ—Ä—Ä–µ–π–Ω–∞ - —Ä–µ–∂–∏–º—ã add, sub, set
 */
function testTerrainOpsBasic(): void {
  console.log('üß™ Testing TerrainOps basic modes...');

  const baseConfig: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'perlin',
      params: {
        seed: 12345,
        octaveCount: 1,
        amplitude: 0.1,
        persistence: 0.5,
        width: 32,
        height: 32
      }
    },
    ops: [
      {
        id: 'test-add',
        mode: 'add',
        center: [0, 0],
        radius: 2,
        intensity: 5,
        falloff: 'linear'
      }
    ]
  };

  const samplerWithOps = createGfxHeightSampler(baseConfig);
  
  // –°–æ–∑–¥–∞–µ–º —Å—ç–º–ø–ª–µ—Ä –±–µ–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const baseConfigNoOps = { ...baseConfig, ops: undefined };
  const samplerNoOps = createGfxHeightSampler(baseConfigNoOps);
  
  // –í —Ü–µ–Ω—Ç—Ä–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (0, 0) –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –Ω–∞ intensity
  const baseHeight = samplerNoOps.getHeight(0, 0);
  const modifiedHeight = samplerWithOps.getHeight(0, 0);
  
  // –° linear falloff –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ + intensity
  assertApproxEqual(modifiedHeight, baseHeight + 5, 0.1);
  
  // –ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–¥–∏—É—Å–∞ –≤–ª–∏—è–Ω–∏—è –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –±–∞–∑–æ–≤–æ–π
  const farHeight = samplerWithOps.getHeight(5, 5);
  const baseFarHeight = samplerNoOps.getHeight(5, 5);
  assertApproxEqual(farHeight, baseFarHeight, 0.001);
  
  console.log('‚úÖ TerrainOps basic modes test passed');
}

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –∑–∞—Ç—É—Ö–∞–Ω–∏—è: linear, smoothstep, gauss
 */
function testTerrainOpsFalloffs(): void {
  console.log('üß™ Testing TerrainOps falloff functions...');

  const createConfigWithFalloff = (falloff: 'linear' | 'smoothstep' | 'gauss'): GfxTerrainConfig => ({
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'legacy',
      data: new Float32Array([0, 0, 0, 0]), // –ø–ª–æ—Å–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
      width: 2,
      height: 2
    },
    ops: [
      {
        id: 'test-falloff',
        mode: 'add',
        center: [0, 0],
        radius: 2,
        intensity: 10,
        falloff: falloff
      }
    ]
  });

  const linearSampler = createGfxHeightSampler(createConfigWithFalloff('linear'));
  const smoothstepSampler = createGfxHeightSampler(createConfigWithFalloff('smoothstep'));
  const gaussSampler = createGfxHeightSampler(createConfigWithFalloff('gauss'));
  
  // –í —Ü–µ–Ω—Ç—Ä–µ –≤—Å–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  const centerLinear = linearSampler.getHeight(0, 0);
  const centerSmoothstep = smoothstepSampler.getHeight(0, 0);
  const centerGauss = gaussSampler.getHeight(0, 0);
  
  // –í—Å–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ intensity (10) –≤ —Ü–µ–Ω—Ç—Ä–µ
  assertApproxEqual(centerLinear, 10, 0.1);
  assertApproxEqual(centerSmoothstep, 10, 0.1);
  assertApproxEqual(centerGauss, 10, 0.1);
  
  // –ù–∞ –ø–æ–ª–æ–≤–∏–Ω–µ —Ä–∞–¥–∏—É—Å–∞ —Ä–∞–∑–ª–∏—á–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã
  const halfRadiusLinear = linearSampler.getHeight(1, 0);
  const halfRadiusSmoothstep = smoothstepSampler.getHeight(1, 0);
  const halfRadiusGauss = gaussSampler.getHeight(1, 0);
  
  // Linear –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 50% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
  assertApproxEqual(halfRadiusLinear, 5, 0.5);
  
  // Smoothstep –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
  assert(halfRadiusSmoothstep > 0 && halfRadiusSmoothstep < 10, 'Smoothstep should be between 0 and max');
  
  // Gauss –¥–æ–ª–∂–µ–Ω —Å–ø–∞–¥–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ
  assert(halfRadiusGauss > 0 && halfRadiusGauss < 10, 'Gauss should be between 0 and max');
  
  console.log('‚úÖ TerrainOps falloff functions test passed');
}

/**
 * –¢–µ—Å—Ç —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å radiusZ –∏ rotation
 */
function testTerrainOpsElliptical(): void {
  console.log('üß™ Testing TerrainOps elliptical operations...');

  const config: GfxTerrainConfig = {
    worldWidth: 10,
    worldHeight: 10,
    source: {
      kind: 'legacy',
      data: new Float32Array([0, 0, 0, 0]), // –ø–ª–æ—Å–∫–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
      width: 2,
      height: 2
    },
    ops: [
      {
        id: 'test-ellipse',
        mode: 'add',
        center: [0, 0],
        radius: 3,  // —Ä–∞–¥–∏—É—Å –ø–æ X
        radiusZ: 1, // —Ä–∞–¥–∏—É—Å –ø–æ Z (—Å–æ–∑–¥–∞–µ—Ç —ç–ª–ª–∏–ø—Å)
        intensity: 5,
        falloff: 'linear',
        rotation: Math.PI / 4  // –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 45 –≥—Ä–∞–¥—É—Å–æ–≤
      }
    ]
  };

  const sampler = createGfxHeightSampler(config);
  
  // –í —Ü–µ–Ω—Ç—Ä–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
  const centerHeight = sampler.getHeight(0, 0);
  assertApproxEqual(centerHeight, 5, 0.1);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
  // –ù–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ radius –ø–æ X –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (—Å —É—á–µ—Ç–æ–º –ø–æ–≤–æ—Ä–æ—Ç–∞) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–ª–∏—è–Ω–∏–µ
  // –ù–∞ –±–æ–ª—å—à–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –ø–æ Z (—Å —É—á–µ—Ç–æ–º radiusZ) –≤–ª–∏—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ
  
  const heightAtX = sampler.getHeight(2, 0);
  const heightAtZ = sampler.getHeight(0, 2);
  
  // –ò–∑-–∑–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ —ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
  // –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –æ–Ω–∏ –Ω–µ —Ä–∞–≤–Ω—ã –Ω—É–ª—é –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
  assert(heightAtX >= 0, 'Height at X should be non-negative');
  assert(heightAtZ >= 0, 'Height at Z should be non-negative');
  
  console.log('‚úÖ TerrainOps elliptical operations test passed');
}

/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
 */
function testSpatialIndexPerformance(): void {
  console.log('üß™ Testing spatial index performance...');

  // –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
  const manyOps: GfxTerrainConfig['ops'] = [];
  for (let i = 0; i < 100; i++) {
    manyOps.push({
      id: `op-${i}`,
      mode: 'add',
      center: [Math.random() * 100, Math.random() * 100],
      radius: 1 + Math.random() * 5,
      intensity: Math.random() * 10,
      falloff: 'linear'
    });
  }

  const config: GfxTerrainConfig = {
    worldWidth: 100,
    worldHeight: 100,
    source: {
      kind: 'legacy',
      data: new Float32Array([0, 0, 0, 0]),
      width: 2,
      height: 2
    },
    ops: manyOps
  };

  const sampler = createGfxHeightSampler(config);
  
  // –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã—Å–æ—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const startTime = performance.now();
  
  for (let i = 0; i < 1000; i++) {
    const x = Math.random() * 100;
    const z = Math.random() * 100;
    const height = sampler.getHeight(x, z);
    assert(typeof height === 'number' && isFinite(height), 'Height should be finite number');
  }
  
  const endTime = performance.now();
  const duration = endTime - startTime;
  
  console.log(`‚ö° Processed 1000 height queries with 100 ops in ${duration.toFixed(2)}ms`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ
  const cacheStartTime = performance.now();
  
  for (let i = 0; i < 1000; i++) {
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–µ –∂–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
    sampler.getHeight(50, 50);
  }
  
  const cacheEndTime = performance.now();
  const cacheDuration = cacheEndTime - cacheStartTime;
  
  console.log(`‚ö° Processed 1000 cached queries in ${cacheDuration.toFixed(2)}ms`);
  
  // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ
  assert(cacheDuration < duration / 2, 'Cached queries should be much faster');
  
  console.log('‚úÖ Spatial index performance test passed');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
export function runGfxHeightSamplerTests(): void {
  console.log('üöÄ Running GfxHeightSampler tests...\n');

  try {
    testPerlinSource();
    testLegacySource();
    testEdgeFade();
    testHeightmapSource();
    testSeedDeterminism();
    
    // –ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è GfxTerrainOps (–§–∞–∑–∞ 3)
    testTerrainOpsBasic();
    testTerrainOpsFalloffs();
    testTerrainOpsElliptical();
    testSpatialIndexPerformance();
    
    console.log('\n‚úÖ All GfxHeightSampler tests passed!');
  } catch (error) {
    console.error('\n‚ùå Test failed:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (import.meta.env?.DEV) {
  // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
  // runGfxHeightSamplerTests();
}