/**
 * Параметры процедурной генерации дерева.
 * На основе этих значений генератор строит набор примитивов ствола/ветвей/листвы
 * и возвращает их для добавления в редактируемый объект.
 */
export interface TreeGeneratorParams {
  /** Сид случайности для детерминированной генерации */
  seed: number
  /** Общая высота ствола (в единицах сцены) */
  trunkHeight: number
  /** Радиус ствола у основания */
  trunkRadius: number
  /** Количество сегментов ствола (вертикальная детализация) */
  trunkSegments: number
  /**
   * Коэффициент сужения ствола к верху (0..1).
   * 0 — без сужения; 1 — радиус к верху стремится к нулю.
   * Рекомендуемые значения 0.2..0.6. По умолчанию 0.4.
   */
  trunkTaperFactor?: number
  /** Количество уровней ветвления (0 — без ветвей) */
  branchLevels: number
  /** Количество ветвей на сегмент ствола (усреднённо) */
  branchesPerSegment: number
  /** Длина ветви базовая (умножается на коэффициенты по уровням) */
  branchLength: number
  /** Радиус ветви на первом уровне (тоньше на следующих уровнях) */
  branchRadius: number
  /** Угол наклона ветви от вертикали, в градусах */
  branchAngleDeg: number
  /** Доля случайного разброса параметров (0..1) */
  randomness: number
  /** Количество листьев на конце каждой ветви (на верхнем уровне) */
  leavesPerBranch: number
  /** Размер (радиус) листа, если рендерим лист как сферу */
  leafSize: number
  /** Тип листвы: billboard или sphere */
  leafShape?: 'billboard' | 'sphere'
  /**
   * Разброс наклона ветви относительно вертикали (0..1).
   * Применяется к параметру `branchAngleDeg`: при 0 — без разброса (точно
   * `branchAngleDeg`), при 1 — максимальный джиттер наклона (порядка ±50%
   * от `branchAngleDeg`). На азимут не влияет: азимут выбирается случайно
   * равномерно в диапазоне [0..2π].
   */
  angleSpread?: number

  /**
   * Коэффициент заглубления ответвлений в родительскую ветку/ствол (0..1).
   * Глубина заглубления рассчитывается как min(parentRadius, branchRadius) * embedFactor
   * и используется, чтобы скрыть торцевую круглую грань цилиндра ветки внутри
   * родительского цилиндра. Значение по умолчанию: 0.6.
   */
  embedFactor?: number

  /**
   * Количество уровней разветвления самого ствола (0 — без разветвления ствола).
   * Каждый уровень создаёт ответвления-стволы меньшего радиуса с небольшим наклоном.
   * По умолчанию 0.
   */
  trunkBranchLevels?: number
  /**
   * Сколько стволов образуется на каждом уровне разветвления. По умолчанию 2.
   */
  trunkBranchesPerLevel?: number
  /**
   * Угол наклона ответвлений ствола от вертикали (в градусах). По умолчанию 20°.
   */
  trunkBranchAngleDeg?: number
  /**
   * Во сколько раз короче высота дочерних стволов относительно родителя (0..1). По умолчанию 0.7.
   */
  trunkBranchChildHeightFactor?: number
}

/**
 * Результат генерации дерева: примитивы и базовые материалы (без UUID).
 */
export interface TreeGeneratorResult {
  primitives: import('@/entities/primitive').GfxPrimitive[]
  materials: import('@/entities/material').CreateGfxMaterial[]
}
