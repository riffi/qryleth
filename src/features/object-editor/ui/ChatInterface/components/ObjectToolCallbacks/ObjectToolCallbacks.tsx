/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è AI tools –≤ ObjectEditor
 */

import React from 'react'
import type { ToolCall } from '@/shared/entities/chat'

interface ObjectToolCallbacksProps {
  toolCalls?: ToolCall[]
  className?: string
}

export const ObjectToolCallbacks: React.FC<ObjectToolCallbacksProps> = ({ 
  toolCalls = [], 
  className = '' 
}) => {
  if (toolCalls.length === 0) return null

  return (
    <div className={`object-tool-callbacks ${className}`}>
      {toolCalls.map((toolCall) => (
        <div key={toolCall.id} className="tool-call-result">
          <div className="tool-call-header">
            <span className="tool-name">üîß {getToolDisplayName(toolCall.name)}</span>
            <span className="tool-status">
              {toolCall.result ? '‚úÖ' : '‚è≥'}
            </span>
          </div>
          
          {toolCall.result && (
            <div className="tool-call-result-content">
              {formatToolResult(toolCall.name, toolCall.result)}
            </div>
          )}
          
          {toolCall.arguments && (
            <details className="tool-call-args">
              <summary>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã</summary>
              <pre>{JSON.stringify(JSON.parse(toolCall.arguments), null, 2)}</pre>
            </details>
          )}
        </div>
      ))}
    </div>
  )
}

function getToolDisplayName(toolName: string): string {
  const displayNames: Record<string, string> = {
    add_primitives: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤',
    modify_primitive: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–∞',
    remove_primitive: '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–∞',
    duplicate_primitive: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–∞',
    create_material: '–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
    update_material: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
    assign_material: '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
    remove_material: '–£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
    duplicate_material: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
    analyze_object: '–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–∞',
    optimize_object: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞',
    validate_object: '–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞',
    suggest_improvements: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π',
    calculate_stats: '–ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
    generate_variations: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π'
  }
  
  return displayNames[toolName] || toolName
}

function formatToolResult(toolName: string, result: any): React.ReactNode {
  if (typeof result === 'string') {
    return <div className="result-text">{result}</div>
  }
  
  if (typeof result === 'object') {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    switch (toolName) {
      case 'analyze_object':
      case 'validate_object':
      case 'calculate_stats':
        return (
          <div className="result-formatted">
            {result.summary && <div className="result-summary">{result.summary}</div>}
            {result.details && (
              <div className="result-details">
                {Array.isArray(result.details) 
                  ? result.details.map((detail: string, i: number) => (
                      <div key={i} className="detail-item">‚Ä¢ {detail}</div>
                    ))
                  : <div>{result.details}</div>
                }
              </div>
            )}
          </div>
        )
      
      default:
        return <pre className="result-json">{JSON.stringify(result, null, 2)}</pre>
    }
  }
  
  return <div className="result-other">{String(result)}</div>
}
