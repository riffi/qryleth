/**
 * –•—É–∫ –¥–ª—è chat —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ ObjectEditor
 */

import { useCallback, useMemo, useEffect, useRef, useState } from 'react'
import { useChat } from '@/shared/entities/chat'
import type { ChatConfig, ChatMessage } from '@/shared/entities/chat'
import { langChainChatService } from '@/shared/lib/langchain'
import { useObjectStore } from '@/features/object-editor'
import { createObjectEditorTools } from '@/features/object-editor/lib/ai/tools'
import { useObjectContextPrompt } from './useObjectContextPrompt'
import type { GfxPrimitive } from '@/entities/primitive'
import type { CreateGfxMaterial } from '@/entities/material'
import { generateUUID } from '@/shared/lib/uuid'
import { nanoid } from 'nanoid'

interface UseObjectChatOptions {
  mode?: 'page' | 'modal'
  onPrimitiveAdded?: (primitive: GfxPrimitive) => void
  onMaterialCreated?: (material: CreateGfxMaterial) => void
  onObjectModified?: (modifications: any) => void
}

export const useObjectChat = (options: UseObjectChatOptions = {}) => {
  const { mode = 'page', onPrimitiveAdded, onMaterialCreated, onObjectModified } = options
  
  const objectStore = useObjectStore()
  const { systemPrompt, objectInfo, contextualHints } = useObjectContextPrompt()
  const [isLoading, setIsLoading] = useState(false)

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è object-editor
  const chatConfig: ChatConfig = useMemo(() => ({
    feature: 'object-editor',
    tools: [], // LangChain tools —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    systemPrompt,
    debugMode: false, // –ú–µ–Ω–µ–µ verbose —á–µ–º scene
    maxMessages: 50, // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    autoScroll: true
  }), [systemPrompt])

  // Tool callbacks –¥–ª—è object-editor —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const handleToolCall = useCallback(async (toolName: string, args: any) => {
    try {
      switch (toolName) {
        case 'addPrimitives': {
          const { primitives } = args
          for (const primitiveData of primitives) {
            const newPrimitive: GfxPrimitive = {
              id: generateUUID(),
              primitiveType: primitiveData.primitiveType,
              position: primitiveData.position || { x: 0, y: 0, z: 0 },
              rotation: primitiveData.rotation || { x: 0, y: 0, z: 0 },
              scale: primitiveData.scale || { x: 1, y: 1, z: 1 },
              materialUuid: primitiveData.materialUuid || null,
              name: primitiveData.name || `${primitiveData.primitiveType}_${Date.now()}`,
              visible: true
            }
            objectStore.addPrimitive(newPrimitive)
            onPrimitiveAdded?.(newPrimitive)
          }
          return `–î–æ–±–∞–≤–ª–µ–Ω–æ ${primitives.length} –ø—Ä–∏–º–∏—Ç–∏–≤(–æ–≤)`
        }

        case 'modifyPrimitive': {
          const { index, updates } = args
          objectStore.updatePrimitive(index, updates)
          onObjectModified?.({ type: 'primitiveModified', index, updates })
          return `–ü—Ä–∏–º–∏—Ç–∏–≤ ${index} –æ–±–Ω–æ–≤–ª–µ–Ω`
        }

        case 'removePrimitive': {
          const { index } = args
          objectStore.removePrimitive(index)
          onObjectModified?.({ type: 'primitiveRemoved', index })
          return `–ü—Ä–∏–º–∏—Ç–∏–≤ ${index} —É–¥–∞–ª–µ–Ω`
        }

        case 'duplicatePrimitive': {
          const { index, offset = { x: 1, y: 0, z: 0 }, count = 1 } = args
          const originalPrimitive = objectStore.primitives[index]
          if (originalPrimitive) {
            for (let i = 1; i <= count; i++) {
              const duplicatedPrimitive: GfxPrimitive = {
                ...originalPrimitive,
                id: generateUUID(),
                name: `${originalPrimitive.name}_copy_${i}`,
                position: {
                  x: originalPrimitive.position.x + offset.x * i,
                  y: originalPrimitive.position.y + offset.y * i,
                  z: originalPrimitive.position.z + offset.z * i
                }
              }
              objectStore.addPrimitive(duplicatedPrimitive)
            }
            return `–°–æ–∑–¥–∞–Ω–æ ${count} –∫–æ–ø–∏–π –ø—Ä–∏–º–∏—Ç–∏–≤–∞ ${originalPrimitive.name}`
          }
          return '–ü—Ä–∏–º–∏—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }

        case 'createMaterial': {
          const { name, color, metalness = 0, roughness = 0.5, opacity = 1, emissive, emissiveIntensity = 0 } = args
          const newMaterial: CreateGfxMaterial = {
            name,
            color,
            metalness,
            roughness,
            opacity,
            ...(emissive && { emissive }),
            ...(emissiveIntensity > 0 && { emissiveIntensity })
          }
          const createdMaterial = objectStore.addMaterial(newMaterial)
          onMaterialCreated?.(newMaterial)
          return `–ú–∞—Ç–µ—Ä–∏–∞–ª "${name}" —Å–æ–∑–¥–∞–Ω`
        }

        case 'updateMaterial': {
          const { materialUuid, updates } = args
          objectStore.updateMaterial(materialUuid, updates)
          onObjectModified?.({ type: 'materialUpdated', materialUuid, updates })
          return `–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω`
        }

        case 'assignMaterial': {
          const { materialUuid, primitiveIndices } = args
          for (const index of primitiveIndices) {
            objectStore.updatePrimitive(index, { materialUuid })
          }
          return `–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω ${primitiveIndices.length} –ø—Ä–∏–º–∏—Ç–∏–≤(–∞–º)`
        }

        case 'removeMaterial': {
          const { materialUuid, replacementMaterialUuid } = args
          if (replacementMaterialUuid) {
            // –ó–∞–º–µ–Ω–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –≤–æ –≤—Å–µ—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–∞—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            objectStore.primitives.forEach((primitive, index) => {
              if (primitive.materialUuid === materialUuid) {
                objectStore.updatePrimitive(index, { materialUuid: replacementMaterialUuid })
              }
            })
          }
          objectStore.removeMaterial(materialUuid)
          return '–ú–∞—Ç–µ—Ä–∏–∞–ª —É–¥–∞–ª–µ–Ω'
        }

        case 'duplicateMaterial': {
          const { sourceMaterialUuid, newName, modifications = {} } = args
          const sourceMaterial = objectStore.materials.find(m => m.uuid === sourceMaterialUuid)
          if (sourceMaterial) {
            const duplicatedMaterial: CreateGfxMaterial = {
              ...sourceMaterial,
              name: newName,
              ...modifications
            }
            objectStore.addMaterial(duplicatedMaterial)
            return `–ú–∞—Ç–µ—Ä–∏–∞–ª "${newName}" —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ "${sourceMaterial.name}"`
          }
          return '–ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }

        case 'analyzeObject': {
          const { analysisType, detailed = false } = args
          const analysis = performObjectAnalysis(objectStore, analysisType, detailed)
          return analysis
        }

        case 'validateObject': {
          const { checkTypes = ['geometry', 'materials', 'transforms'], strict = false } = args
          const validation = performObjectValidation(objectStore, checkTypes, strict)
          return validation
        }

        case 'calculateStats': {
          const { includeEstimates = true, compareWithStandards = false } = args
          const stats = calculateObjectStats(objectStore, includeEstimates, compareWithStandards)
          return stats
        }

        default:
          return `–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "${toolName}" –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω`
      }
    } catch (error) {
      return `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è "${toolName}": ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
    }
  }, [objectStore, onPrimitiveAdded, onMaterialCreated, onObjectModified])

  // –ë–∞–∑–æ–≤—ã–π useChat –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const baseChatState = useChat({
    config: chatConfig,
    generateMessageId: () => nanoid()
  })

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π sendMessage —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π LangChain
  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim() || isLoading) return

    const userMessage: ChatMessage = {
      id: nanoid(),
      role: 'user',
      content: content.trim(),
      timestamp: new Date()
    }

    baseChatState.addMessage(userMessage)
    setIsLoading(true)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º LangChain –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const langChainResponse = await langChainChatService.chat([...baseChatState.messages, userMessage])

      const assistantMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: langChainResponse.message,
        timestamp: new Date()
      }
      baseChatState.addMessage(assistantMessage)

    } catch (error) {
      console.error('ObjectEditor chat error:', error)
      const errorMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',  
        content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        timestamp: new Date()
      }
      baseChatState.addMessage(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }, [baseChatState, isLoading])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  const addSystemMessage = useCallback((content: string) => {
    const systemMessage: ChatMessage = {
      id: crypto.randomUUID(),
      role: 'system',
      content,
      timestamp: new Date()
    }
    baseChatState.addMessage(systemMessage)
  }, [baseChatState])

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
  const showContextualHints = useCallback(() => {
    if (contextualHints.length > 0) {
      const hintsMessage = `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n${contextualHints.map(hint => `‚Ä¢ ${hint}`).join('\n')}`
      addSystemMessage(hintsMessage)
    }
  }, [contextualHints, addSystemMessage])

  // Tool callback –¥–ª—è LangChain —Å–µ—Ä–≤–∏—Å–∞
  const handleToolCallbackRef = useRef(handleToolCall)

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ callback'–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Å–µ—Ä–≤–∏—Å–æ–º LangChain
  useEffect(() => {
    handleToolCallbackRef.current = handleToolCall
    langChainChatService.setToolCallback(handleToolCall)
  }, [handleToolCall])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LangChain —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const initializeService = async () => {
      try {
        await langChainChatService.initialize()
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ tools –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à–∏
        langChainChatService.clearTools()
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ObjectEditor tools
        const objectEditorTools = createObjectEditorTools()
        
        objectEditorTools.forEach(tool => {
          langChainChatService.registerDynamicTool(tool)
        })
        
        langChainChatService.setToolCallback(handleToolCallbackRef.current)
        console.log('ObjectEditor LangChain —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å', objectEditorTools.length, '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏')
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ObjectEditor LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)
        
        const errorMessage: ChatMessage = {
          id: nanoid(),
          role: 'assistant',
          content: `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          timestamp: new Date()
        }
        baseChatState.addMessage(errorMessage)
      }
    }

    initializeService()
  }, [baseChatState.addMessage])

  return {
    ...baseChatState,
    isLoading,
    sendMessage, // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π sendMessage
    objectInfo,
    contextualHints,
    addSystemMessage,
    showContextualHints,
    isCompactMode: mode === 'modal'
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
function performObjectAnalysis(objectStore: any, analysisType: string, detailed: boolean): string {
  const { primitives, materials } = objectStore
  
  switch (analysisType) {
    case 'structure':
      return `–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
- –ü—Ä–∏–º–∏—Ç–∏–≤—ã: ${primitives.length}
- –¢–∏–ø—ã: ${[...new Set(primitives.map((p: any) => p.primitiveType))].join(', ')}
- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materials.length}
${detailed ? '\n- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ö–æ–∂–∏—Ö –ø—Ä–∏–º–∏—Ç–∏–≤–æ–≤' : ''}`

    case 'materials':
      return `–ê–Ω–∞–ª–∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:
- –í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: ${materials.length}
- –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materials.filter((m: any) => 
  !primitives.some((p: any) => p.materialUuid === m.uuid)
).length}
${detailed ? '\n- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã' : ''}`

    case 'performance':
      return `–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
- –ü—Ä–∏–º–∏—Ç–∏–≤—ã: ${primitives.length} (${primitives.length > 100 ? '–º–Ω–æ–≥–æ' : '–Ω–æ—Ä–º–∞–ª—å–Ω–æ'})
- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materials.length} (${materials.length > 10 ? '–º–Ω–æ–≥–æ' : '–Ω–æ—Ä–º–∞–ª—å–Ω–æ'})
${detailed ? '\n- –ü—Ä–∏ >100 –ø—Ä–∏–º–∏—Ç–∏–≤–∞—Ö —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—ã' : ''}`

    default:
      return '–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ'
  }
}

function performObjectValidation(objectStore: any, checkTypes: string[], strict: boolean): string {
  const issues: string[] = []
  const { primitives, materials } = objectStore

  if (checkTypes.includes('geometry')) {
    const invalidPrimitives = primitives.filter((p: any) => 
      !p.primitiveType || p.scale.x <= 0 || p.scale.y <= 0 || p.scale.z <= 0
    )
    if (invalidPrimitives.length > 0) {
      issues.push(`${invalidPrimitives.length} –ø—Ä–∏–º–∏—Ç–∏–≤(–æ–≤) —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–µ–π`)
    }
  }

  if (checkTypes.includes('materials')) {
    const invalidMaterials = materials.filter((m: any) => !m.name || !m.color)
    if (invalidMaterials.length > 0) {
      issues.push(`${invalidMaterials.length} –º–∞—Ç–µ—Ä–∏–∞–ª(–æ–≤) —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`)
    }
  }

  return issues.length > 0 
    ? `–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:\n${issues.map(issue => `‚Ä¢ ${issue}`).join('\n')}`
    : '–û–±—ä–µ–∫—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ ‚úÖ'
}

function calculateObjectStats(objectStore: any, includeEstimates: boolean, compareWithStandards: boolean): string {
  const { primitives, materials } = objectStore
  
  let stats = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—ä–µ–∫—Ç–∞:
- –ü—Ä–∏–º–∏—Ç–∏–≤—ã: ${primitives.length}
- –ú–∞—Ç–µ—Ä–∏–∞–ª—ã: ${materials.length}
- –í–∏–¥–∏–º—ã–µ –ø—Ä–∏–º–∏—Ç–∏–≤—ã: ${primitives.filter((p: any) => p.visible).length}`

  if (includeEstimates) {
    const estimatedPolygons = primitives.length * 100 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    stats += `\n- –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: ${estimatedPolygons}`
  }

  if (compareWithStandards) {
    const performanceLevel = primitives.length < 50 ? '–û—Ç–ª–∏—á–Ω–∞—è' : 
                            primitives.length < 200 ? '–•–æ—Ä–æ—à–∞—è' : '–¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏'
    stats += `\n- –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${performanceLevel}`
  }

  return stats
}
