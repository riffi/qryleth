/**
 * –•—É–∫ –¥–ª—è chat —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ ObjectEditor
 */

import { useCallback, useMemo, useEffect, useState } from 'react'
import { useChat } from '@/shared/entities/chat'
import type { ChatConfig, ChatMessage } from '@/shared/entities/chat'
import { langChainChatService } from '@/shared/lib/langchain'
import { createObjectEditorTools } from '@/features/object-editor/lib/ai/tools'
import { useObjectContextPrompt } from './useObjectContextPrompt'
import { nanoid } from 'nanoid'

interface UseObjectChatOptions {
  mode?: 'page' | 'modal'
}

export const useObjectChat = (options: UseObjectChatOptions = {}) => {
  const { mode = 'page' } = options
  const { systemPrompt, objectInfo, contextualHints } = useObjectContextPrompt()
  const [isLoading, setIsLoading] = useState(false)

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è object-editor
  const chatConfig: ChatConfig = useMemo(() => ({
    feature: 'object-editor',
    tools: [], // LangChain tools —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    systemPrompt,
    debugMode: false,
    maxMessages: 50,
    autoScroll: true
  }), [systemPrompt])

  // –ë–∞–∑–æ–≤—ã–π useChat –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const baseChatState = useChat({
    config: chatConfig,
    generateMessageId: () => nanoid()
  })

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim() || isLoading) return

    const userMessage: ChatMessage = {
      id: nanoid(),
      role: 'user',
      content: content.trim(),
      timestamp: new Date()
    }

    baseChatState.addMessage(userMessage)
    setIsLoading(true)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º LangChain –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const langChainResponse = await langChainChatService.chat([...baseChatState.messages, userMessage])

      const assistantMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: langChainResponse.message,
        timestamp: new Date()
      }
      baseChatState.addMessage(assistantMessage)

    } catch (error) {
      console.error('ObjectEditor chat error:', error)
      const errorMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        timestamp: new Date()
      }
      baseChatState.addMessage(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }, [baseChatState, isLoading])

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
  const addSystemMessage = useCallback((content: string) => {
    const systemMessage: ChatMessage = {
      id: crypto.randomUUID(),
      role: 'system',
      content,
      timestamp: new Date()
    }
    baseChatState.addMessage(systemMessage)
  }, [baseChatState])

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
  const showContextualHints = useCallback(() => {
    if (contextualHints.length > 0) {
      const hintsMessage = `üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n${contextualHints.map(hint => `‚Ä¢ ${hint}`).join('\n')}`
      addSystemMessage(hintsMessage)
    }
  }, [contextualHints, addSystemMessage])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LangChain —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const initializeService = async () => {
      try {
        await langChainChatService.initialize()

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ tools –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–∞—à–∏
        langChainChatService.clearTools()

        const objectEditorTools = createObjectEditorTools()
        objectEditorTools.forEach(tool => {
          langChainChatService.registerDynamicTool(tool)
        })

        console.log('ObjectEditor LangChain —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å', objectEditorTools.length, '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏')
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ObjectEditor LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)

        const errorMessage: ChatMessage = {
          id: nanoid(),
          role: 'assistant',
          content: `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          timestamp: new Date()
        }
        baseChatState.addMessage(errorMessage)
      }
    }

    initializeService()
  }, [baseChatState.addMessage])

  return {
    ...baseChatState,
    isLoading,
    sendMessage, // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π sendMessage
    objectInfo,
    contextualHints,
    addSystemMessage,
    showContextualHints,
    isCompactMode: mode === 'modal'
  }
}

