import React, { useState, useEffect } from 'react'
import { Stack, Paper, Text, Group, Badge, ActionIcon, ScrollArea } from '@mantine/core'
import { IconTrash, IconBulb, IconArrowsDiagonalMinimize2 } from '@tabler/icons-react'
import { ChatMessageItem, ChatInput, useChatScroll } from '@/shared/entities/chat'
import { useObjectChat } from './hooks'
import { ObjectToolCallbacks } from './components/ObjectToolCallbacks'
import type { GfxPrimitive } from '@/entities/primitive'
import type { CreateGfxMaterial } from '@/entities/material'

interface ObjectChatInterfaceProps {
  isVisible: boolean
  onVisibilityChange?: (visible: boolean) => void
  mode?: 'page' | 'modal'
  className?: string
  onPrimitiveAdded?: (primitive: GfxPrimitive) => void
  onMaterialCreated?: (material: CreateGfxMaterial) => void
  onObjectModified?: (modifications: Record<string, unknown>) => void
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ –¥–ª—è ObjectEditor —Å –≤–µ—Ä—Å—Ç–∫–æ–π, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π SceneEditor.
 */
export const ObjectChatInterface: React.FC<ObjectChatInterfaceProps> = ({
  isVisible,
  onVisibilityChange,
  mode = 'page',
  className = '',
  onPrimitiveAdded,
  onMaterialCreated,
  onObjectModified
}) => {
  const [inputValue, setInputValue] = useState('')

  const {
    messages,
    isLoading,
    sendMessage,
    clearMessages,
    objectInfo,
    contextualHints,
    showContextualHints,
    addSystemMessage
  } = useObjectChat({
    mode,
    onPrimitiveAdded,
    onMaterialCreated,
    onObjectModified
  })

  const { scrollAreaRef } = useChatScroll(messages)

  useEffect(() => {
    if (isVisible && messages.length === 0) {
      const welcomeMessage = objectInfo.isEmpty
        ? `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å 3D –æ–±—ä–µ–∫—Ç.\n\n–ù–∞—á–Ω–µ–º —Å –æ—Å–Ω–æ–≤ - —è –º–æ–≥—É:\n‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–∏—Ç–∏–≤—ã (box, sphere, cylinder –∏ –¥—Ä.)\n‚Ä¢ –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–≤–µ—Ç–∞ –∏ —Ç–µ–∫—Å—Ç—É—Ä\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É\n\n–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–æ–∑–¥–∞—Ç—å?`
        : `üëã –ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç —Å ${objectInfo.primitivesCount} –ø—Ä–∏–º–∏—Ç–∏–≤(–∞–º–∏) –∏ ${objectInfo.materialsCount} –º–∞—Ç–µ—Ä–∏–∞–ª(–∞–º–∏).\n\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`

      addSystemMessage(welcomeMessage)

      if (contextualHints.length > 0) {
        setTimeout(() => showContextualHints(), 1000)
      }
    }
  }, [isVisible, messages.length, objectInfo, addSystemMessage, showContextualHints, contextualHints.length])

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞.
   */
  const handleSend = async () => {
    if (!inputValue.trim()) return
    await sendMessage(inputValue.trim())
    setInputValue('')
  }

  if (!isVisible) return null

  return (
    <Stack gap={0} className={className} style={{ height: '100%', minHeight: 0, overflow: 'hidden' }}>
      <Paper p="md" withBorder>
        <Group justify="space-between" align="center">
          <Group gap="xs" align="center">
            <Text size="lg" fw={500}>–ß–∞—Ç</Text>
            {!objectInfo.isEmpty && (
              <Badge variant="light" color="gray">
                {objectInfo.primitivesCount}P ‚Ä¢ {objectInfo.materialsCount}M
              </Badge>
            )}
          </Group>
          <Group gap="xs">
            {contextualHints.length > 0 && (
              <ActionIcon
                variant="light"
                size="sm"
                onClick={showContextualHints}
                aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏"
              >
                <IconBulb size={16} />
              </ActionIcon>
            )}
            <ActionIcon
              variant="light"
              size="sm"
              onClick={clearMessages}
              aria-label="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"
            >
              <IconTrash size={16} />
            </ActionIcon>
            {onVisibilityChange && (
              <ActionIcon
                variant="subtle"
                size="sm"
                onClick={() => onVisibilityChange(false)}
                aria-label="–°–∫—Ä—ã—Ç—å —á–∞—Ç"
              >
                <IconArrowsDiagonalMinimize2 size={16} />
              </ActionIcon>
            )}
          </Group>
        </Group>
      </Paper>

      <ScrollArea p="sm" ref={scrollAreaRef} style={{ flex: 1, minHeight: 0 }}>
        <Stack gap="sm">
          {messages.length === 0 && (
            <Paper p="sm" withBorder style={{ backgroundColor: '#4e4e4e' }}>
              <Text c="white" ta="center" style={{ fontSize: '0.8rem' }}>
                –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º...
              </Text>
            </Paper>
          )}

          {messages.map(message => (
            <div key={message.id}>
              <ChatMessageItem message={message} />
              {message.toolCalls && message.toolCalls.length > 0 && (
                <ObjectToolCallbacks toolCalls={message.toolCalls} />
              )}
            </div>
          ))}

          {isLoading && (
            <Paper p="sm" withBorder style={{ backgroundColor: '#31484a' }}>
              <Group gap="xs">
                <Text size="sm" fw={500} c="green">
                  –ê–≥–µ–Ω—Ç
                </Text>
              </Group>
              <Text c="dimmed" fs="italic" style={{ fontSize: '0.8rem' }}>
                –î—É–º–∞—é...
              </Text>
            </Paper>
          )}
        </Stack>
      </ScrollArea>

      <ChatInput
        value={inputValue}
        onChange={setInputValue}
        onSend={handleSend}
        placeholder={
          objectInfo.isEmpty
            ? "–ù–∞–ø—Ä–∏–º–µ—Ä: '–°–æ–∑–¥–∞–π –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–º–∞'"
            : '–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –æ–±—ä–µ–∫—Ç–µ?'
        }
        disabled={isLoading}
        loading={isLoading}
      />
    </Stack>
  )
}
