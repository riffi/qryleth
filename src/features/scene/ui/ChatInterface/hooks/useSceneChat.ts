import { useCallback, useEffect, useRef } from 'react'
import { useChat } from '@/shared/entities/chat'
import type { ChatMessage, ChatConfig } from '@/shared/entities/chat'
import { langChainChatService, LangChainChatService } from '@/shared/lib/langchain'
import { getActiveConnection, upsertConnection } from '@/shared/lib/openAISettings'
import type { OpenAISettingsConnection } from '@/shared/lib/openAISettings'
import { createAddNewObjectTool } from '@/features/scene/lib/ai/tools'
import type { GfxObjectWithTransform } from '@/entities'
import { nanoid } from 'nanoid'

interface UseSceneChatOptions {
  onObjectAdded?: (object: GfxObjectWithTransform, toolName: string) => void
  debugMode?: boolean
}

interface UseSceneChatReturn {
  messages: ChatMessage[]
  isLoading: boolean
  sendMessage: (content: string) => Promise<void>
  addMessage: (message: ChatMessage) => void
  clearMessages: () => void
  connection: OpenAISettingsConnection | null
  updateModel: (model: string) => Promise<void>
  debugChatService: LangChainChatService | null
}

export const useSceneChat = (options: UseSceneChatOptions = {}): UseSceneChatReturn => {
  const { onObjectAdded, debugMode = true } = options
  const debugChatServiceRef = useRef<LangChainChatService | null>(null)
  const connectionRef = useRef<OpenAISettingsConnection | null>(null)

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è scene
  const chatConfig: ChatConfig = {
    feature: 'scene',
    tools: [], // Tools —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ LangChain —Å–µ—Ä–≤–∏—Å
    systemPrompt: 'You are a helpful assistant that can use tools to interact with a 3D scene.',
    debugMode
  }

  const baseChat = useChat({
    config: chatConfig,
    generateMessageId: () => nanoid()
  })

  // Scene-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const sendMessage = useCallback(async (content: string) => {
    if (!content.trim() || baseChat.isLoading) return

    const userMessage: ChatMessage = {
      id: nanoid(),
      role: 'user',
      content: content.trim(),
      timestamp: new Date()
    }

    baseChat.addMessage(userMessage)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º LangChain –∞–≥–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      const langChainResponse = await langChainChatService.chat([...baseChat.messages, userMessage])

      const assistantMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: langChainResponse.message,
        timestamp: new Date()
      }
      baseChat.addMessage(assistantMessage)

    } catch (error) {
      console.error('Scene chat error:', error)
      const errorMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        timestamp: new Date()
      }
      baseChat.addMessage(errorMessage)
    }
  }, [baseChat])

  // Scene-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ tool calls
  const handleToolCallback = useCallback((toolName: string, result: unknown) => {
    const res = result as { success?: boolean; object?: GfxObjectWithTransform }
    
    if (toolName === 'add_new_object' || toolName === 'add_object_from_library') {
      if (res.success && res.object) {
        // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π callback
        onObjectAdded?.(res.object, toolName)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        const icon = toolName === 'add_new_object' ? '‚úÖ' : 'üìò'
        const successMessage: ChatMessage = {
          id: nanoid(),
          role: 'assistant',
          content: `${icon} ${toolName === 'add_new_object' ? '–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç' : '–û–±—ä–µ–∫—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏'} "${res.object.name}" –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ü–µ–Ω—É.`,
          timestamp: new Date()
        }
        baseChat.addMessage(successMessage)
      }
    }
  }, [onObjectAdded, baseChat.addMessage])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
  const updateModel = useCallback(async (model: string) => {
    if (!connectionRef.current) return
    
    const updated = { ...connectionRef.current, model }
    await upsertConnection(updated)
    connectionRef.current = updated

    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LangChain —Å–µ—Ä–≤–∏—Å —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é
    try {
      await langChainChatService.updateConnection()
      console.log('LangChain —Å–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª—å—é:', model)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏
      const errorMessage: ChatMessage = {
        id: nanoid(),
        role: 'assistant',
        content: `‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        timestamp: new Date()
      }
      baseChat.addMessage(errorMessage)
    }
  }, [baseChat.addMessage])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
  useEffect(() => {
    const initializeServices = async () => {
      const activeConnection = await getActiveConnection()
      connectionRef.current = activeConnection

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π LangChain —Å–µ—Ä–≤–∏—Å
      try {
        await langChainChatService.initialize()
        langChainChatService.setToolCallback(handleToolCallback)
        console.log('LangChain —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:', langChainChatService.getRegisteredTools())
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)
        
        const errorMessage: ChatMessage = {
          id: nanoid(),
          role: 'assistant',  
          content: `‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          timestamp: new Date()
        }
        baseChat.addMessage(errorMessage)
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π LangChain —Å–µ—Ä–≤–∏—Å —Ç–æ–ª—å–∫–æ —Å createAddNewObjectTool
      if (debugMode) {
        try {
          const debugService = new LangChainChatService(
            '–°—Ä–∞–∑—É –∂–µ –≤—ã–ø–æ–ª–Ω–∏ tool –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ —É—Ç–æ—á–Ω—è—è –¥–µ—Ç–∞–ª–∏'
          )
          await debugService.initialize()
          debugService.clearTools()
          debugService.registerDynamicTool(createAddNewObjectTool())
          debugChatServiceRef.current = debugService
          console.log('Debug LangChain —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:', debugService.getRegisteredTools())
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ LangChain —Å–µ—Ä–≤–∏—Å–∞:', error)
        }
      }
    }

    initializeServices()
  }, [debugMode, handleToolCallback, baseChat.addMessage])

  return {
    ...baseChat,
    sendMessage,
    connection: connectionRef.current,
    updateModel,
    debugChatService: debugChatServiceRef.current
  }
}