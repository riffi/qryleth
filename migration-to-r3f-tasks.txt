Задачи для миграции приложения с Three.js на React Three Fiber (R3F)

=====================================================================

ФАЗА 1: АНАЛИЗ И ПОДГОТОВКА
=====================================================================

1. Анализ текущей архитектуры Three.js
   - Изучить структуру useThreeJSScene.ts и определить ключевые компоненты
   - Документировать все Three.js сущности (Scene, Camera, Renderer, Controls, etc.)
   - Проанализировать систему управления объектами и их размещением
   - Изучить систему слоев и ландшафтов
   - Документировать систему освещения и материалов

2. Планирование архитектуры R3F
   - Определить структуру React компонентов для 3D сцены
   - Спланировать миграцию хуков и состояния
   - Определить использование Zustand для состояния 3D сцены
   - Спланировать интеграцию с существующими UI компонентами

3. Настройка R3F экосистемы
   - Установить @react-three/fiber
   - Установить @react-three/drei для дополнительных компонентов
   - Установить @react-three/postprocessing для эффектов
   - Настроить TypeScript типы для R3F

=====================================================================

ФАЗА 2: ОСНОВНАЯ МИГРАЦИЯ СЦЕНЫ
=====================================================================

4. Создание базового R3F Canvas компонента
   - Заменить Three.js renderer на R3F Canvas
   - Настроить базовые параметры рендера (shadows, tone mapping, etc.)
   - Интегрировать с существующим контейнером

5. Миграция камеры и контролов
   - Заменить Three.js PerspectiveCamera на R3F <PerspectiveCamera>
   - Мигрировать OrbitControls с помощью <OrbitControls> из drei
   - Реализовать PointerLockControls для walk/fly режимов
   - Сохранить функциональность переключения режимов просмотра

6. Миграция системы освещения
   - Заменить Three.js освещение на R3F компоненты (<ambientLight>, <directionalLight>)
   - Сохранить функциональность динамического изменения освещения
   - Мигрировать настройки теней

7. Создание системы объектов R3F
   - Создать React компоненты для каждого типа примитивов (Box, Sphere, Cylinder, etc.)
   - Реализовать систему составных объектов как React компонентов
   - Сохранить функциональность размещения и трансформации объектов

=====================================================================

ФАЗА 3: ИНТЕРАКТИВНОСТЬ И КОНТРОЛЫ
=====================================================================

8. Миграция Transform Controls
   - Интегрировать <TransformControls> из drei
   - Сохранить функциональность выделения и перемещения объектов
   - Реализовать обновление состояния при трансформации

9. Система выделения и подсветки объектов
   - Заменить OutlinePass на R3F решения (Outline из postprocessing или drei)
   - Реализовать hover эффекты с использованием R3F событий
   - Сохранить функциональность выделения объектов

10. Обработка событий мыши и клавиатуры
    - Мигрировать систему кликов и raycasting на R3F события
    - Реализовать hover эффекты через onPointerOver/onPointerOut
    - Сохранить клавиатурные shortcuts для управления объектами

=====================================================================

ФАЗА 4: ПРОДВИНУТЫЕ ФУНКЦИИ
=====================================================================

11. Миграция системы слоев
    - Создать R3F компоненты для управления слоями
    - Реализовать переключение видимости слоев
    - Сохранить drag & drop функциональность между слоями

12. Система ландшафтов и Perlin noise
    - Мигрировать создание ландшафтных мешей на R3F
    - Реализовать Perlin noise генерацию в R3F контексте
    - Сохранить редактирование размеров и форм ландшафтов

13. Постобработка и эффекты
    - Мигрировать EffectComposer на @react-three/postprocessing
    - Реализовать outline эффекты через <Outline> или <Select>
    - Настроить tone mapping и другие post-processing эффекты

=====================================================================

ФАЗА 5: СОСТОЯНИЕ И ПРОИЗВОДИТЕЛЬНОСТЬ
=====================================================================

14. Система управления состоянием
    - Создать Zustand store для 3D сцены
    - Мигрировать useState/useRef логику в централизованное состояние
    - Реализовать селекторы для оптимизации ре-рендеров

15. Оптимизация производительности
    - Использовать <Instances> для повторяющихся объектов
    - Реализовать frustum culling и LOD при необходимости
    - Оптимизировать обновления материалов и геометрии

16. Система истории (Undo/Redo)
    - Адаптировать существующую систему истории под R3F
    - Обеспечить сериализацию/десериализацию состояния сцены
    - Сохранить функциональность отката изменений

=====================================================================

ФАЗА 6: ИНТЕГРАЦИЯ И ТЕСТИРОВАНИЕ
=====================================================================

17. Интеграция с ObjectManager
    - Адаптировать ObjectManager для работы с R3F состоянием
    - Обеспечить синхронизацию UI и 3D сцены
    - Сохранить всю функциональность управления объектами

18. Миграция редактора объектов
    - Адаптировать ObjectEditor для работы с R3F
    - Сохранить функциональность редактирования примитивов
    - Обеспечить real-time обновления в 3D сцене

19. Система сохранения и загрузки
    - Адаптировать сериализацию сцены под R3F структуру
    - Обеспечить совместимость с существующими сохраненными сценами
    - Протестировать загрузку/сохранение в библиотеку

20. Тестирование и отладка
    - Провести полное тестирование всех функций
    - Сравнить производительность с оригинальной версией
    - Исправить обнаруженные проблемы и несоответствия

=====================================================================

ДОПОЛНИТЕЛЬНЫЕ ЗАДАЧИ (ОПЦИОНАЛЬНО)
=====================================================================

21. Улучшения производительности
    - Реализовать WebGL instancing для одинаковых объектов
    - Добавить progressive loading для сложных сцен
    - Оптимизировать работу с большими сценами

22. Новые возможности R3F
    - Добавить анимации с использованием react-spring
    - Реализовать физику с помощью @react-three/cannon
    - Добавить продвинутые материалы и шейдеры

23. Улучшение developer experience
    - Добавить R3F dev tools
    - Улучшить hot reload для 3D компонентов
    - Добавить профилирование производительности

=====================================================================

КРИТЕРИИ ЗАВЕРШЕНИЯ
=====================================================================

✅ Все текущие функции работают в R3F версии
✅ Производительность не хуже оригинальной версии
✅ UI компоненты корректно взаимодействуют с R3F сценой
✅ Система сохранения/загрузки работает без потери данных
✅ Все интерактивные элементы (выделение, перемещение, редактирование) функционируют
✅ Transform controls работают корректно
✅ Система слоев и ландшафтов полностью функциональна
✅ История изменений (undo/redo) работает стабильно

=====================================================================

ПРИОРИТЕТЫ
=====================================================================

ВЫСОКИЙ ПРИОРИТЕТ:
- Фазы 1-3 (базовая функциональность)
- Задачи 14, 17, 19 (состояние и интеграция)

СРЕДНИЙ ПРИОРИТЕТ:
- Фаза 4 (продвинутые функции)
- Задачи 15, 16, 18, 20 (оптимизация и тестирование)

НИЗКИЙ ПРИОРИТЕТ:
- Дополнительные задачи (новые возможности)

=====================================================================

ПРИМЕЧАНИЯ
=====================================================================

1. Миграция должна быть постепенной - создать новую ветку и мигрировать по компонентам
2. Сохранить обратную совместимость с существующими сохраненными сценами
3. Обеспечить плавный переход без потери функциональности
4. Документировать все изменения в архитектуре
5. Создать руководство по новой R3F архитектуре для разработчиков

Общий объем работы: ~3-4 недели для опытного React/Three.js разработчика